const n=JSON.parse('{"key":"v-99db8cbe","path":"/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/12.%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D.html","title":"手写深拷贝","lang":"zh-CN","frontmatter":{"title":"手写深拷贝","order":12,"category":["面试","JS"],"description":"深拷贝与浅拷贝 浅拷贝：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址 ，如果其中一个对象改变了这个地址，就会影响到另一个对象 深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象 基础版 通过递归，将一个对象的所有 key 复制给新建的空对象 function clone(source) { // 堆内存开辟一个新的区域 if (source &amp;&amp; typeof source === \\"object\\") { let target = {}; for (let key in source) { // 递归，防止source[key]也是一个对象 target[key] = clone(source[key]); } return target; } else { return source; } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/12.%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"手写深拷贝"}],["meta",{"property":"og:description","content":"深拷贝与浅拷贝 浅拷贝：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址 ，如果其中一个对象改变了这个地址，就会影响到另一个对象 深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象 基础版 通过递归，将一个对象的所有 key 复制给新建的空对象 function clone(source) { // 堆内存开辟一个新的区域 if (source &amp;&amp; typeof source === \\"object\\") { let target = {}; for (let key in source) { // 递归，防止source[key]也是一个对象 target[key] = clone(source[key]); } return target; } else { return source; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-11T13:42:59.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-11T13:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写深拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-11T13:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深拷贝与浅拷贝","slug":"深拷贝与浅拷贝","link":"#深拷贝与浅拷贝","children":[]},{"level":2,"title":"基础版","slug":"基础版","link":"#基础版","children":[]},{"level":2,"title":"考虑数组的情况","slug":"考虑数组的情况","link":"#考虑数组的情况","children":[]},{"level":2,"title":"考虑循环引用的情况","slug":"考虑循环引用的情况","link":"#考虑循环引用的情况","children":[]},{"level":2,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[]}],"git":{"createdTime":1710073278000,"updatedTime":1710164579000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":2}]},"readingTime":{"minutes":3.25,"words":975},"filePathRelative":"前端笔记/js/12.手写深拷贝.md","localizedDate":"2024年3月10日","excerpt":"<h2> 深拷贝与浅拷贝</h2>\\n<p>浅拷贝：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址 ，如果其中一个对象改变了这个地址，就会影响到另一个对象</p>\\n<p>深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</p>\\n<h2> 基础版</h2>\\n<p>通过递归，将一个对象的所有 key 复制给新建的空对象</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">clone</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">source</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 堆内存开辟一个新的区域</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>source <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token keyword\\">typeof</span> source <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"object\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> target <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> key <span class=\\"token keyword\\">in</span> source<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 递归，防止source[key]也是一个对象</span>\\n      target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">clone</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> target<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> source<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
