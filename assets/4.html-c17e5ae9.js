const e=JSON.parse('{"key":"v-48336b66","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/2.%E6%8E%92%E5%88%97/4.html","title":"重新安排行程","lang":"zh-CN","frontmatter":{"title":"重新安排行程","order":3,"category":["算法题","排列","回溯"],"description":"题目链接 重新安排行程 思路 本题存在如下一些问题: 如何搜索一个机场对应的所有机场 存在多种解法，需要根据字母排序 如何判断终止条件 如何避免一个机场被多次使用 基于这些问题，为了查询的方便，将 tickets 数组首先整理成一个 map,它的 key 是出发机场，value 是到达机场的数组；然后对 value 根据字母顺序进行排序；同时本题的回溯并不是要找出所有的解法，而是根据排序的顺序遍历，找出第一个能够满足条件的解法，这样的解法一定是满足字母排序的。最后为了避免一个机场被多次作为到达机场，每次选中一个 city，就要到 map 中将其暂时删除，等回溯时在恢复","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/2.%E6%8E%92%E5%88%97/4.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"重新安排行程"}],["meta",{"property":"og:description","content":"题目链接 重新安排行程 思路 本题存在如下一些问题: 如何搜索一个机场对应的所有机场 存在多种解法，需要根据字母排序 如何判断终止条件 如何避免一个机场被多次使用 基于这些问题，为了查询的方便，将 tickets 数组首先整理成一个 map,它的 key 是出发机场，value 是到达机场的数组；然后对 value 根据字母顺序进行排序；同时本题的回溯并不是要找出所有的解法，而是根据排序的顺序遍历，找出第一个能够满足条件的解法，这样的解法一定是满足字母排序的。最后为了避免一个机场被多次作为到达机场，每次选中一个 city，就要到 map 中将其暂时删除，等回溯时在恢复"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T09:44:36.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-07T09:44:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重新安排行程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T09:44:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1709804676000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":2}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"算法题/回溯/2.排列/4.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/reconstruct-itinerary/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">重新安排行程</a></p>\\n<h2> 思路</h2>\\n<p>本题存在如下一些问题:</p>\\n<ol>\\n<li>如何搜索一个机场对应的所有机场</li>\\n<li>存在多种解法，需要根据字母排序</li>\\n<li>如何判断终止条件</li>\\n<li>如何避免一个机场被多次使用</li>\\n</ol>\\n<p>基于这些问题，为了查询的方便，将 tickets 数组首先整理成一个 map,它的 key 是出发机场，value 是到达机场的数组；然后对 value 根据字母顺序进行排序；同时本题的回溯并不是要找出所有的解法，而是根据排序的顺序遍历，找出第一个能够满足条件的解法，这样的解法一定是满足字母排序的。最后为了避免一个机场被多次作为到达机场，每次选中一个 city，就要到 map 中将其暂时删除，等回溯时在恢复</p>","autoDesc":true}');export{e as data};
