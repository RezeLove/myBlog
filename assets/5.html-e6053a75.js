const n=JSON.parse('{"key":"v-edf9a268","path":"/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/2.diff%E7%AE%97%E6%B3%95/5.html","title":"五、双端diff算法","lang":"zh-CN","frontmatter":{"title":"五、双端diff算法","icon":"laptop-code","order":5,"category":["使用指南"],"description":"简单 diff 算法的缺点 假如现在的新旧节点如下所示，如果采用简单 diff 算法，会进行 2 次 DOM 操作，将 p1 和 p2 分别移动到 p3 的后面 但如果将 p3 插入到最后，只需要 1 次 DOM 操作即可 //old [ { type: \\"p\\", children: \\"1\\", key: 3 }, { type: \\"p\\", children: \\"2\\", key: 1 }, { type: \\"p\\", children: \\"3\\", key: 2 }, ]; //new [ { type: \\"p\\", children: \\"3\\", key: 3 }, { type: \\"p\\", children: \\"1\\", key: 1 }, { type: \\"p\\", children: \\"2\\", key: 2 }, ];","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/2.diff%E7%AE%97%E6%B3%95/5.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"五、双端diff算法"}],["meta",{"property":"og:description","content":"简单 diff 算法的缺点 假如现在的新旧节点如下所示，如果采用简单 diff 算法，会进行 2 次 DOM 操作，将 p1 和 p2 分别移动到 p3 的后面 但如果将 p3 插入到最后，只需要 1 次 DOM 操作即可 //old [ { type: \\"p\\", children: \\"1\\", key: 3 }, { type: \\"p\\", children: \\"2\\", key: 1 }, { type: \\"p\\", children: \\"3\\", key: 2 }, ]; //new [ { type: \\"p\\", children: \\"3\\", key: 3 }, { type: \\"p\\", children: \\"1\\", key: 1 }, { type: \\"p\\", children: \\"2\\", key: 2 }, ];"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"五、双端diff算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简单 diff 算法的缺点","slug":"简单-diff-算法的缺点","link":"#简单-diff-算法的缺点","children":[]},{"level":2,"title":"双端 diff 算法-理想情况","slug":"双端-diff-算法-理想情况","link":"#双端-diff-算法-理想情况","children":[]},{"level":2,"title":"双端 diff 算法-非理想情况","slug":"双端-diff-算法-非理想情况","link":"#双端-diff-算法-非理想情况","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":3.42,"words":1026},"filePathRelative":"vue-learn/运行时/2.diff算法/5.md","localizedDate":"2024年1月21日","excerpt":"<h2> 简单 diff 算法的缺点</h2>\\n<p>假如现在的新旧节点如下所示，如果采用简单 diff 算法，会进行 2 次 DOM 操作，将 p1 和 p2 分别移动到 p3 的后面<br>\\n但如果将 p3 插入到最后，只需要 1 次 DOM 操作即可</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//old</span>\\n<span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"1\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"2\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"3\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//new</span>\\n<span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"3\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"1\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"p\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"2\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
