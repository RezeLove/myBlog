import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as n,b as s,e as c,f as l}from"./app-af8dd441.js";const i={},r=n("h2",{id:"参考连接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考连接","aria-hidden":"true"},"#"),s(" 参考连接")],-1),u={href:"https://juejin.cn/post/7080187400298692644#heading-2",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="new-的作用" tabindex="-1"><a class="header-anchor" href="#new-的作用" aria-hidden="true">#</a> new 的作用</h2><p>new 用于实例化构造函数，主要是有以下几个步骤：</p><ol><li>创建一个空的对象 newObject，作为实例的上下文；</li><li>将类上的原型放在 newObject 的原型链上，使得 newObject 可以调用类中定义的函数；</li><li>将 newObject 作为 this，执行构造函数；</li><li>判断类执行后是否有返回一个对象，如果有，则返回该对象；如果没有，则返回 newObject;</li></ol><p>new 的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;zyh&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 实际的执行过程伪代码：</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1 创建一个空对象 let obj = new Object()</span>
  <span class="token comment">// 2 对象与构建函数通过原型链连接起来 obj.__proto__ = Person.prototype</span>
  <span class="token comment">// 3 构建函数中的this绑定到新建的对象obj上,并执行 let res = Person.call(obj,name,age)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token comment">// 4 根据构建函数返回类型作判断，如果有返回值且是对象，就讲该对象返回；否则返回this</span>
  <span class="token comment">// return Object(res) === res ? res : obj</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new-实现第一版" tabindex="-1"><a class="header-anchor" href="#new-实现第一版" aria-hidden="true">#</a> new 实现第一版</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 1.创建一个空的简单JavaScript对象（即\`  {}  \`）</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 2.  为步骤1新创建的对象添加属性\`  __proto__  \`，将该属性链接至构造函数的原型对象 ；</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.  将步骤1新创建的对象作为this的上下文 ；</span>
  <span class="token keyword">return</span> res <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span> <span class="token comment">// 4.  如果该函数没有返回对象，则返回this。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该版存在如下 3 个问题：</p><ol><li>无法接受传参</li><li>无法验证 FN 是否为函数</li><li>无法验证 FN 的返回值是否为对象</li></ol><h2 id="new-最终版" tabindex="-1"><a class="header-anchor" href="#new-最终版" aria-hidden="true">#</a> new 最终版</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对FN进行类型校验，解决问题2</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Fn <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;This is not a constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取传参，解决问题1</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 检验res是否为对象，解决问题3</span>
  <span class="token keyword">return</span> <span class="token function">Object</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">===</span> res <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function d(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[s("5 分钟快速手写实现：new"),c(a)])]),k])}const w=e(i,[["render",d],["__file","10.html.vue"]]);export{w as default};
