import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as s,a as e,b as a,e as h,f as o}from"./app-b9bc2072.js";const n={},c=e("h2",{id:"参考链接",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),a(" 参考链接")],-1),p={href:"https://juejin.cn/post/7116336664540086286",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6861586972696444942",target:"_blank",rel:"noopener noreferrer"},u=o('<h2 id="spa-与前端路由" tabindex="-1"><a class="header-anchor" href="#spa-与前端路由" aria-hidden="true">#</a> SPA 与前端路由</h2><p>SPA（单页面应用，Single-page Web applications）指的是只有一张 Web 页面的应用，在一个项目中只有一个 html 页面，它在第一次加载页面时，将唯一完成的 html 页面和所有其余页面组件一起下载下来，所有的组件的展示与切换都在这唯一的页面中完成，这样切换页面时，不会重新加载整个页面，而是通过路由来实现不同组件之间的切换<br> 核心：更新视图而不重新请求页面</p><p>优点：</p><ul><li>具有桌面应用的即时性、网站的可移植性和可访问性</li><li>用户体验好、快，内容的改变不需要重新加载整个页面</li><li>良好的前后端分离，分工更明确</li></ul><p>缺点：</p><ul><li>不利于搜索引擎的抓取</li><li>首次渲染速度相对较慢</li></ul><h2 id="hash-和-history" tabindex="-1"><a class="header-anchor" href="#hash-和-history" aria-hidden="true">#</a> Hash 和 History</h2><h3 id="_1-hash" tabindex="-1"><a class="header-anchor" href="#_1-hash" aria-hidden="true">#</a> 1. Hash</h3><p>hash 模式是一种把前端路由的路径用井号 # 拼接在真实 URL 后面的模式。 当井号 # 后面的路径发生变化时，浏览器并不会重新发起请求，而是通过 <code>window.onhashchange</code> 监听 hash 的改变，借此实现无刷新跳转的功能。每改变一次 hash,都会在浏览器的访问历史中增加一个记录。</p><p>优点：</p><ul><li>浏览器兼容性较好</li><li>只需要前端配置路由表，hash 值改变不会向后端发送请求, 完全属于前端路由, 不需要后端的参与</li></ul><p>缺点：</p><ul><li>不利于 SEO 优化</li><li>不符合 url 地址规范，不够美观</li></ul><h3 id="_2-history-路由" tabindex="-1"><a class="header-anchor" href="#_2-history-路由" aria-hidden="true">#</a> 2. History 路由</h3><p>History 路由是利用 history API 来实现页面的无刷新跳转。</p><p>pushState() 和 replaceState() 方法 是 H5 提供的新特性，允许开发者直接更改前端路由，即更新浏览器 URL 地址而不重新发起请求，这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会向后端发送请求。</p><p>优点：</p><ul><li>符合 url 地址规范</li></ul><p>缺点：</p><ul><li>在用户手动输入地址或刷新页面时会发起 url 请求, 后端需要配置 index.html 页面，防止用户匹配不到静态资源, 出现 404 错误的情况</li><li>兼容性比较差, 是利用了 HTML5 History 对象中新增的 pushState() 和 replaceState() 方法,需要特定浏览器的支持</li></ul>',20);function _(f,m){const r=i("ExternalLinkIcon");return l(),s("div",null,[c,e("p",null,[e("a",p,[a("hash 和 history 路由的区别"),h(r)]),e("a",d,[a("前端路由模式详解 hash 和 history"),h(r)])]),u])}const y=t(n,[["render",_],["__file","1.html.vue"]]);export{y as default};
