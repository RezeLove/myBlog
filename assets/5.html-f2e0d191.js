import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as s,e as c,f as i}from"./app-1dc02760.js";const l="/assets/images/链表/交换链表.jpg",u={},r=n("h2",{id:"题目连接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目连接","aria-hidden":"true"},"#"),s(" 题目连接")],-1),d={href:"https://leetcode.cn/problems/swap-nodes-in-pairs/description/",target:"_blank",rel:"noopener noreferrer"},k=i('<h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>两两交换链表除了改变相邻结点的 next 关系外，还需要改变前一个结点的 next，因此就是 3 个一组进行处理，可以采用滑动窗口方法</p><figure><img src="'+l+`" alt="滑动窗口" tabindex="0" loading="lazy"><figcaption>滑动窗口</figcaption></figure><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>滑动窗口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">swapPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
  cur <span class="token operator">=</span> ue<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    first <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    second <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>
    temp <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    second<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
    first<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token comment">// 完成交换</span>

    <span class="token comment">// 移动到下一个窗口</span>
    cur <span class="token operator">=</span> first<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归实现滑动窗口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">moveExchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    first <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    second <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>
    temp <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    second<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
    first<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token function">moveExchange</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">swapPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">moveExchange</span><span class="token punctuation">(</span>ue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ue<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function v(m,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",d,[s("两两交换链表元素"),c(a)])]),k])}const x=t(u,[["render",v],["__file","5.html.vue"]]);export{x as default};
