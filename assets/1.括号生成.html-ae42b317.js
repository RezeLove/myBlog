const n=JSON.parse('{"key":"v-03b4e419","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E9%80%92%E5%BD%92/1.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html","title":"括号生成","lang":"zh-CN","frontmatter":{"title":"括号生成","order":1,"category":["算法题","字符串","递归"],"description":"题目链接 括号生成 思路 对于括号匹配有两个约束： 只要还有左括号剩余就可以使用 只有当剩余左括号数量小于右括号数量时才可以使用，否则匹配出错 实现 var generateParenthesis = function (n) { let res = []; const dfs = (l, r, str) =&gt; { // 回溯的出口，匹配完成 if (str.length == n * 2) { res.push(str); } // 左括号还有剩余，回溯 if (l &gt; 0) { dfs(l - 1, r, str + \\"(\\"); } // 右括号剩余数量大于左括号，回溯 if (l &lt; r) { dfs(l, r - 1, str + \\")\\"); } }; dfs(n, n, \\"\\"); return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E9%80%92%E5%BD%92/1.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"括号生成"}],["meta",{"property":"og:description","content":"题目链接 括号生成 思路 对于括号匹配有两个约束： 只要还有左括号剩余就可以使用 只有当剩余左括号数量小于右括号数量时才可以使用，否则匹配出错 实现 var generateParenthesis = function (n) { let res = []; const dfs = (l, r, str) =&gt; { // 回溯的出口，匹配完成 if (str.length == n * 2) { res.push(str); } // 左括号还有剩余，回溯 if (l &gt; 0) { dfs(l - 1, r, str + \\"(\\"); } // 右括号剩余数量大于左括号，回溯 if (l &lt; r) { dfs(l, r - 1, str + \\")\\"); } }; dfs(n, n, \\"\\"); return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T09:44:36.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-07T09:44:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"括号生成\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T09:44:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1709804676000,"updatedTime":1709804676000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"算法题/字符串/递归/1.括号生成.md","localizedDate":"2024年3月7日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/generate-parentheses/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">括号生成</a></p>\\n<h2> 思路</h2>\\n<p>对于括号匹配有两个约束：</p>\\n<ol>\\n<li>\\n<p>只要还有左括号剩余就可以使用</p>\\n</li>\\n<li>\\n<p>只有当剩余左括号数量小于右括号数量时才可以使用，否则匹配出错</p>\\n</li>\\n</ol>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">generateParenthesis</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">n</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">dfs</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> str</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 回溯的出口，匹配完成</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> n <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 左括号还有剩余，回溯</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> str <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"(\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 右括号剩余数量大于左括号，回溯</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token punctuation\\">,</span> r <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> str <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\")\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
