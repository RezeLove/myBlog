const n=JSON.parse('{"key":"v-5f32be14","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E7%9B%B8%E5%90%8C%E6%A0%91/1_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91.html","title":"相同的树","lang":"zh-CN","frontmatter":{"title":"相同的树","order":1,"category":["算法题","二叉树"],"description":"题目 相同的树 思路 中序遍历：先判断两棵树的当前节点是否相同，然后分别判断左子树和右子树 当两棵树的节点同时为空时，才是 true 实现 var isSameTree = function (p, q) { // p和q有一个为空,那么必须两个同时为空才为true if (!p || !q) { return p === q; } else { // p和q都存在 比较当前节点值以及左右子树是否相同 return ( p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right) ); } };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E7%9B%B8%E5%90%8C%E6%A0%91/1_%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"相同的树"}],["meta",{"property":"og:description","content":"题目 相同的树 思路 中序遍历：先判断两棵树的当前节点是否相同，然后分别判断左子树和右子树 当两棵树的节点同时为空时，才是 true 实现 var isSameTree = function (p, q) { // p和q有一个为空,那么必须两个同时为空才为true if (!p || !q) { return p === q; } else { // p和q都存在 比较当前节点值以及左右子树是否相同 return ( p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right) ); } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-23T15:00:29.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-23T15:00:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"相同的树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-23T15:00:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1712390338000,"updatedTime":1713884429000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1},{"name":"‘TX7’","email":"‘1224745953@qq.com’","commits":1}]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"算法题/二叉树/相同树/1,相同的树.md","localizedDate":"2024年4月6日","excerpt":"<h2> 题目</h2>\\n<p><a href=\\"https://leetcode.cn/problems/same-tree/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">相同的树</a></p>\\n<h2> 思路</h2>\\n<p>中序遍历：先判断两棵树的当前节点是否相同，然后分别判断左子树和右子树</p>\\n<p>当两棵树的节点同时为空时，才是 true</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">isSameTree</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">p<span class=\\"token punctuation\\">,</span> q</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// p和q有一个为空,那么必须两个同时为空才为true</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>p <span class=\\"token operator\\">||</span> <span class=\\"token operator\\">!</span>q<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> p <span class=\\"token operator\\">===</span> q<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// p和q都存在 比较当前节点值以及左右子树是否相同</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n      p<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">==</span> q<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">&amp;&amp;</span>\\n      <span class=\\"token function\\">isSameTree</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> q<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n      <span class=\\"token function\\">isSameTree</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> q<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
