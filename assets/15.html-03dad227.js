const n=JSON.parse('{"key":"v-653228cc","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/15.html","title":"删除二叉搜索树中的节点","lang":"zh-CN","frontmatter":{"title":"删除二叉搜索树中的节点","order":15,"category":["算法题","二叉树"],"description":"题目链接 删除二叉搜索树中的节点 思路 与上一题插入节点思路有些类似，通过递归重构每个节点的 left 与 right，但是要考虑代删除节点的多种情况，具体见代码中的注释 实现 var deleteNode = function (root, key) { if (!root) { return null; } if (root.val == key) { // 情况1：待删除的是叶子节点，那么返回null if (root.left == null &amp;&amp; root.right == null) { return null; } // 情况2：待删除节点的左节点或右节点为空，返回另一侧的节点 if (!root.left) { return root.right; } else if (!root.right) { return root.left; } // 左右节点都不为空，将右节点替代当前被删除的节点，同时将左节点插入到右节点的左子树的叶子节点后（搜索二叉树右子树&gt;左子树） if (root.left &amp;&amp; root.right) { let curNode = root.right; // 不端循环，直到找到左子树的叶子节点 while (curNode.left) { curNode = curNode.left; } curNode.left = root.left; return root.right; } } // 重构left与right if (root.val &gt;= key) { root.left = deleteNode(root.left, key); } if (root.val &lt;= key) { root.right = deleteNode(root.right, key); } // 如果没有找到，就返回root，保存树的结构不变 return root; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/15.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"删除二叉搜索树中的节点"}],["meta",{"property":"og:description","content":"题目链接 删除二叉搜索树中的节点 思路 与上一题插入节点思路有些类似，通过递归重构每个节点的 left 与 right，但是要考虑代删除节点的多种情况，具体见代码中的注释 实现 var deleteNode = function (root, key) { if (!root) { return null; } if (root.val == key) { // 情况1：待删除的是叶子节点，那么返回null if (root.left == null &amp;&amp; root.right == null) { return null; } // 情况2：待删除节点的左节点或右节点为空，返回另一侧的节点 if (!root.left) { return root.right; } else if (!root.right) { return root.left; } // 左右节点都不为空，将右节点替代当前被删除的节点，同时将左节点插入到右节点的左子树的叶子节点后（搜索二叉树右子树&gt;左子树） if (root.left &amp;&amp; root.right) { let curNode = root.right; // 不端循环，直到找到左子树的叶子节点 while (curNode.left) { curNode = curNode.left; } curNode.left = root.left; return root.right; } } // 重构left与right if (root.val &gt;= key) { root.left = deleteNode(root.left, key); } if (root.val &lt;= key) { root.right = deleteNode(root.right, key); } // 如果没有找到，就返回root，保存树的结构不变 return root; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"删除二叉搜索树中的节点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"算法题/二叉树/15.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/delete-node-in-a-bst/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">删除二叉搜索树中的节点</a></p>\\n<h2> 思路</h2>\\n<p>与上一题插入节点思路有些类似，通过递归重构每个节点的 left 与 right，但是要考虑代删除节点的多种情况，具体见代码中的注释</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">deleteNode</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">==</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 情况1：待删除的是叶子节点，那么返回null</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 情况2：待删除节点的左节点或右节点为空，返回另一侧的节点</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 左右节点都不为空，将右节点替代当前被删除的节点，同时将左节点插入到右节点的左子树的叶子节点后（搜索二叉树右子树&gt;左子树）</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">&amp;&amp;</span> root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> curNode <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 不端循环，直到找到左子树的叶子节点</span>\\n      <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>curNode<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        curNode <span class=\\"token operator\\">=</span> curNode<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      curNode<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 重构left与right</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">&gt;=</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deleteNode</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">&lt;=</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deleteNode</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 如果没有找到，就返回root，保存树的结构不变</span>\\n  <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
