const n=JSON.parse('{"key":"v-c08c8918","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/3.html","title":"有效的括号","lang":"zh-CN","frontmatter":{"title":"有效的括号","order":3,"category":["算法题","栈与队列"],"description":"题目链接 题目链接 思路 如果是有效的括号，在遍历时遇到闭符号，那么其前前一个字符一定是对应的开符号 因此可以在遍历字符串时，每遇到一个开符号，就在栈中添加一个对应的闭符号；如果遇到一个闭符号，就与栈中最后一个元素比较，如果不同，就无效 实现 var isValid = function (s) { const stack = [], map = { \\"(\\": \\")\\", \\"{\\": \\"}\\", \\"[\\": \\"]\\", }; for (const x of s) { if (x in map) { stack.push(map[x]); continue; } if (stack.pop() !== x) return false; } return !stack.length; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/3.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"有效的括号"}],["meta",{"property":"og:description","content":"题目链接 题目链接 思路 如果是有效的括号，在遍历时遇到闭符号，那么其前前一个字符一定是对应的开符号 因此可以在遍历字符串时，每遇到一个开符号，就在栈中添加一个对应的闭符号；如果遇到一个闭符号，就与栈中最后一个元素比较，如果不同，就无效 实现 var isValid = function (s) { const stack = [], map = { \\"(\\": \\")\\", \\"{\\": \\"}\\", \\"[\\": \\"]\\", }; for (const x of s) { if (x in map) { stack.push(map[x]); continue; } if (stack.pop() !== x) return false; } return !stack.length; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"有效的括号\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.52,"words":155},"filePathRelative":"算法题/栈与队列/3.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/valid-parentheses/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">题目链接</a></p>\\n<h2> 思路</h2>\\n<p>如果是有效的括号，在遍历时遇到闭符号，那么其前前一个字符一定是对应的开符号<br>\\n因此可以在遍历字符串时，每遇到一个开符号，就在栈中添加一个对应的闭符号；如果遇到一个闭符号，就与栈中最后一个元素比较，如果不同，就无效</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">isValid</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">s</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> stack <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token string-property property\\">\\"(\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\")\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token string-property property\\">\\"{\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"}\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token string-property property\\">\\"[\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"]\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> x <span class=\\"token keyword\\">of</span> s<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token keyword\\">in</span> map<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!==</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">!</span>stack<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
