import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,e,f as i}from"./app-58fad652.js";const l="/assets/images/链表/链表相交.png",u={},r=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),s(" 题目链接")],-1),d={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路","aria-hidden":"true"},"#"),s(" 思路")],-1),v=n("p",null,"因为题目中给的两个链表是在某个结点之后完全相交，因此可以将两个链表在尾部进行对齐，然后同时遍历",-1),m=n("figure",null,[n("img",{src:l,alt:"图解",tabindex:"0",loading:"lazy"}),n("figcaption",null,"图解")],-1),b={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/solutions/12624/intersection-of-two-linked-lists-shuang-zhi-zhen-l/",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getLen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    len<span class="token operator">++</span><span class="token punctuation">;</span>
    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sizeA <span class="token operator">=</span> <span class="token function">getLen</span><span class="token punctuation">(</span>headA<span class="token punctuation">)</span><span class="token punctuation">,</span>
    sizeB <span class="token operator">=</span> <span class="token function">getLen</span><span class="token punctuation">(</span>headB<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> curA <span class="token operator">=</span> headA<span class="token punctuation">,</span>
    curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeA <span class="token operator">&lt;</span> sizeB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 交换变量注意加 “分号” ，两个数组交换变量在同一个作用域下时</span>
    <span class="token comment">// 如果不加分号，下面两条代码等同于一条代码: [curA, curB] = [lenB, lenA]</span>
    <span class="token punctuation">[</span>curA<span class="token punctuation">,</span> curB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>curB<span class="token punctuation">,</span> curA<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>sizeA<span class="token punctuation">,</span> sizeB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>sizeB<span class="token punctuation">,</span> sizeA<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> len <span class="token operator">=</span> sizeA <span class="token operator">-</span> sizeB<span class="token punctuation">;</span>

  <span class="token comment">// 尾部对齐</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    curA <span class="token operator">=</span> curA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 找相交结点</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>curA <span class="token operator">&amp;&amp;</span> curA <span class="token operator">!==</span> curB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    curA <span class="token operator">=</span> curA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    curB <span class="token operator">=</span> curB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> curA<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法 2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> headA<span class="token punctuation">,</span>
    <span class="token constant">B</span> <span class="token operator">=</span> headB<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">!=</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">?</span> <span class="token constant">A</span><span class="token punctuation">.</span>next <span class="token operator">:</span> headB<span class="token punctuation">;</span>
    <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">?</span> <span class="token constant">B</span><span class="token punctuation">.</span>next <span class="token operator">:</span> headA<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意问题" tabindex="-1"><a class="header-anchor" href="#注意问题" aria-hidden="true">#</a> 注意问题</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>curA<span class="token punctuation">,</span> curB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>curB<span class="token punctuation">,</span> curA<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>sizeA<span class="token punctuation">,</span> sizeB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>sizeB<span class="token punctuation">,</span> sizeA<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>在通过数组解构交换变量时，如果两个数组交换变量在同一个作用域下时，一定要加上分号，否则上式为变为[curA, curB] = [lenB, lenA]</p></div>`,7);function A(f,B){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",d,[s("链表相交"),e(a)])]),k,v,m,n("p",null,[s("2024/3/10 由于两个链表的长度不一致，因此同时遍历的画无法同时达到相交的节点，但是如果将连个链表拼接起来，则长度完全一致。两个指针同时出发，那么当指针相交时，就说明到了相交的结点（第一次结点错过，因为未能同时到达，未能同时到达），第二次同时到达 "),n("a",b,[s("图解"),e(a)])]),h])}const w=t(u,[["render",A],["__file","6.html.vue"]]);export{w as default};
