const n=JSON.parse('{"key":"v-2fe65f02","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7dp%E9%97%AE%E9%A2%98/1.lcs-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.html","title":"最长公共子序列","lang":"zh-CN","frontmatter":{"title":"最长公共子序列","order":1,"category":["算法题","动态规划","线性DP"],"description":"线性 dp 的含义 递推公式是在前缀/后缀上进行转移（如下的题中，当前的字符相同，就比较前缀的字符串） 题目链接 lcs 思路 总结：递归和动态规划的差异体现在 递归出口 和 dp 数组的初始化 递归+记忆化搜索 var longestCommonSubsequence = function (text1, text2) { let len1 = text1.length, len2 = text2.length; const memo = new Array(len1).fill().map(() =&gt; new Array(len2).fill(-1)); const dfs = (n, m) =&gt; { // 出口 如果n或者m小于0了，说明text1或者text2的长度为0，不可能有公共长度 返回0 if (n &lt; 0 || m &lt; 0) { return 0; } // 记忆化 if (memo[n][m] != -1) { return memo[n][m]; } else { let res; if (text1[n] == text2[m]) { res = dfs(n - 1, m - 1) + 1; } else { res = Math.max(dfs(n - 1, m), dfs(n, m - 1)); } memo[n][m] = res; return res; } }; return dfs(len1 - 1, len2 - 1); };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7dp%E9%97%AE%E9%A2%98/1.lcs-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"最长公共子序列"}],["meta",{"property":"og:description","content":"线性 dp 的含义 递推公式是在前缀/后缀上进行转移（如下的题中，当前的字符相同，就比较前缀的字符串） 题目链接 lcs 思路 总结：递归和动态规划的差异体现在 递归出口 和 dp 数组的初始化 递归+记忆化搜索 var longestCommonSubsequence = function (text1, text2) { let len1 = text1.length, len2 = text2.length; const memo = new Array(len1).fill().map(() =&gt; new Array(len2).fill(-1)); const dfs = (n, m) =&gt; { // 出口 如果n或者m小于0了，说明text1或者text2的长度为0，不可能有公共长度 返回0 if (n &lt; 0 || m &lt; 0) { return 0; } // 记忆化 if (memo[n][m] != -1) { return memo[n][m]; } else { let res; if (text1[n] == text2[m]) { res = dfs(n - 1, m - 1) + 1; } else { res = Math.max(dfs(n - 1, m), dfs(n, m - 1)); } memo[n][m] = res; return res; } }; return dfs(len1 - 1, len2 - 1); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T02:55:24.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-15T02:55:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最长公共子序列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T02:55:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"线性 dp 的含义","slug":"线性-dp-的含义","link":"#线性-dp-的含义","children":[]},{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]}],"git":{"createdTime":1713149724000,"updatedTime":1713149724000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.19,"words":357},"filePathRelative":"算法题/动态规划/线性dp问题/1.lcs-最长公共子序列.md","localizedDate":"2024年4月15日","excerpt":"<h2> 线性 dp 的含义</h2>\\n<p>递推公式是在前缀/后缀上进行转移（如下的题中，当前的字符相同，就比较前缀的字符串）</p>\\n<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/delete-operation-for-two-strings/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lcs</a></p>\\n<h2> 思路</h2>\\n<p>总结：递归和动态规划的差异体现在 递归出口 和 dp 数组的初始化</p>\\n<ol>\\n<li>递归+记忆化搜索</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">longestCommonSubsequence</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">text1<span class=\\"token punctuation\\">,</span> text2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> len1 <span class=\\"token operator\\">=</span> text1<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">,</span>\\n    len2 <span class=\\"token operator\\">=</span> text2<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> memo <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>len1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>len2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">dfs</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">n<span class=\\"token punctuation\\">,</span> m</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 出口 如果n或者m小于0了，说明text1或者text2的长度为0，不可能有公共长度 返回0</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> m <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 记忆化</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>memo<span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>m<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> memo<span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>m<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> res<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>text1<span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> text2<span class=\\"token punctuation\\">[</span>m<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        res <span class=\\"token operator\\">=</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> m <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        res <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">,</span> m <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      memo<span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>m<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> res<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>len1 <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> len2 <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
