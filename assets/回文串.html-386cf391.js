const n=JSON.parse('{"key":"v-00160158","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E4%B8%B2/%E5%9B%9E%E6%96%87%E4%B8%B2.html","title":"回文子串","lang":"zh-CN","frontmatter":{"title":"回文子串","order":1,"category":["算法题","字符串","中心扩散法"],"description":"题 1 最长回文串 思路：通过 map 保存每个字符出现的次数，如果是偶数，直接加上，如果是奇数，就-1，再加上；此外可以选一个奇数的字符作为中心，因此额外+1 var longestPalindrome = function (s) { let map = {}, even = 0, odd = 0; for (let c of s) { if (map[c] &gt; 0) { map[c]++; } else { map[c] = 1; } } for (let key in map) { if (map[key] % 2 === 0) { even += map[key]; } else { even += map[key] - 1; odd = 1; } } return even + odd; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E4%B8%B2/%E5%9B%9E%E6%96%87%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"回文子串"}],["meta",{"property":"og:description","content":"题 1 最长回文串 思路：通过 map 保存每个字符出现的次数，如果是偶数，直接加上，如果是奇数，就-1，再加上；此外可以选一个奇数的字符作为中心，因此额外+1 var longestPalindrome = function (s) { let map = {}, even = 0, odd = 0; for (let c of s) { if (map[c] &gt; 0) { map[c]++; } else { map[c] = 1; } } for (let key in map) { if (map[key] % 2 === 0) { even += map[key]; } else { even += map[key] - 1; odd = 1; } } return even + odd; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-23T02:52:28.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-09-23T02:52:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回文子串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-23T02:52:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题 1","slug":"题-1","link":"#题-1","children":[]},{"level":2,"title":"题 2 中心扩散法——最长的回文子串","slug":"题-2-中心扩散法——最长的回文子串","link":"#题-2-中心扩散法——最长的回文子串","children":[]},{"level":2,"title":"题 2 中心扩散法——回文子串的个数","slug":"题-2-中心扩散法——回文子串的个数","link":"#题-2-中心扩散法——回文子串的个数","children":[]}],"git":{"createdTime":1712574674000,"updatedTime":1727059948000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":2}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"算法题/字符串/回文串/回文串.md","localizedDate":"2024年4月8日","excerpt":"<h2> 题 1</h2>\\n<p><a href=\\"https://leetcode.cn/problems/longest-palindrome/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">最长回文串</a>\\n思路：通过 map 保存每个字符出现的次数，如果是偶数，直接加上，如果是奇数，就-1，再加上；此外可以选一个奇数的字符作为中心，因此额外+1</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">longestPalindrome</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">s</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    even <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    odd <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> c <span class=\\"token keyword\\">of</span> s<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>c<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">[</span>c<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">[</span>c<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> key <span class=\\"token keyword\\">in</span> map<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      even <span class=\\"token operator\\">+=</span> map<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      even <span class=\\"token operator\\">+=</span> map<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n      odd <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> even <span class=\\"token operator\\">+</span> odd<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
