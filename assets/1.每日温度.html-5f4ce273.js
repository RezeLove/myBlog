const n=JSON.parse('{"key":"v-61653286","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88/1.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html","title":"每日温度","lang":"zh-CN","frontmatter":{"title":"每日温度","order":1,"category":["算法题","单调栈"],"description":"题目链接 题目链接 思路 单调栈适用情况：一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置 思路：遍历数组，对于当前数，找出栈中小于该元素的出栈，并将该元素入栈 实现 var dailyTemperatures = function (temperatures) { const len = temperatures.length; // 栈 保存的是数组元素的索引 let stack = [], // 结果数组 res = Array(len).fill(0); stack.push(0); for (let i = 1; i &lt; len; i++) { while ( // 找到比当前与元素小的元素索引 temperatures[i] &gt; temperatures[stack[stack.length - 1]] &amp;&amp; stack.length &gt; 0 ) { // 获取栈头元素的索引 const top = stack.pop(); // i-top即为这个元素对应的结果 res[top] = i - top; } // 将当前元素入栈 stack.push(i); } return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88/1.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"每日温度"}],["meta",{"property":"og:description","content":"题目链接 题目链接 思路 单调栈适用情况：一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置 思路：遍历数组，对于当前数，找出栈中小于该元素的出栈，并将该元素入栈 实现 var dailyTemperatures = function (temperatures) { const len = temperatures.length; // 栈 保存的是数组元素的索引 let stack = [], // 结果数组 res = Array(len).fill(0); stack.push(0); for (let i = 1; i &lt; len; i++) { while ( // 找到比当前与元素小的元素索引 temperatures[i] &gt; temperatures[stack[stack.length - 1]] &amp;&amp; stack.length &gt; 0 ) { // 获取栈头元素的索引 const top = stack.pop(); // i-top即为这个元素对应的结果 res[top] = i - top; } // 将当前元素入栈 stack.push(i); } return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T05:54:46.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-18T05:54:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"每日温度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T05:54:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1713419686000,"updatedTime":1713419686000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.7,"words":210},"filePathRelative":"算法题/栈与队列/单调栈/1.每日温度.md","localizedDate":"2024年4月18日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/daily-temperatures/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">题目链接</a></p>\\n<h2> 思路</h2>\\n<p>单调栈适用情况：一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置</p>\\n<p>思路：遍历数组，对于当前数，找出栈中小于该元素的出栈，并将该元素入栈</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">dailyTemperatures</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">temperatures</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> len <span class=\\"token operator\\">=</span> temperatures<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//   栈 保存的是数组元素的索引</span>\\n  <span class=\\"token keyword\\">let</span> stack <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 结果数组</span>\\n    res <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Array</span><span class=\\"token punctuation\\">(</span>len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> len<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token comment\\">// 找到比当前与元素小的元素索引</span>\\n      temperatures<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> temperatures<span class=\\"token punctuation\\">[</span>stack<span class=\\"token punctuation\\">[</span>stack<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n      stack<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 获取栈头元素的索引</span>\\n      <span class=\\"token keyword\\">const</span> top <span class=\\"token operator\\">=</span> stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// i-top即为这个元素对应的结果</span>\\n      res<span class=\\"token punctuation\\">[</span>top<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">-</span> top<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 将当前元素入栈</span>\\n    stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
