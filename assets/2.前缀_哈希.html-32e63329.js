const n=JSON.parse('{"key":"v-3bacaac8","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%89%8D%E7%BC%80%E5%92%8C/2.%E5%89%8D%E7%BC%80_%E5%93%88%E5%B8%8C.html","title":"前缀+哈希","lang":"zh-CN","frontmatter":{"title":"前缀+哈希","order":2,"category":["算法题","前缀和"],"description":"思路 前缀和通常会与哈希表一起使用，比如当访问到某个位置的前缀和时，如果存在前缀和与目标元素的差值存在于哈希表中，那么说明存在满足的条件 例题 1 —— 和为 K 的子数组 思路：比如对于 i 位置，如果存在位置 k(k&lt;i) 如果存在 prefix[i]-prefix[k]==k，那么说明存在满足条件的情况 那么 k+1-i 的区间长度就是满足条件的子数组的长度 var subarraySum = function (nums, k) { // 当preSum[i] 就等于k时，次数+1 因此初始化map[0]为1 let map = { 0: 1 }; let preSum = 0; let count = 0; for (let n of nums) { preSum += n; if (map[preSum - k]) { count += map[preSum - k]; } if (map[preSum]) { map[preSum] += 1; } else { map[preSum] = 1; } } return count; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%89%8D%E7%BC%80%E5%92%8C/2.%E5%89%8D%E7%BC%80_%E5%93%88%E5%B8%8C.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"前缀+哈希"}],["meta",{"property":"og:description","content":"思路 前缀和通常会与哈希表一起使用，比如当访问到某个位置的前缀和时，如果存在前缀和与目标元素的差值存在于哈希表中，那么说明存在满足的条件 例题 1 —— 和为 K 的子数组 思路：比如对于 i 位置，如果存在位置 k(k&lt;i) 如果存在 prefix[i]-prefix[k]==k，那么说明存在满足条件的情况 那么 k+1-i 的区间长度就是满足条件的子数组的长度 var subarraySum = function (nums, k) { // 当preSum[i] 就等于k时，次数+1 因此初始化map[0]为1 let map = { 0: 1 }; let preSum = 0; let count = 0; for (let n of nums) { preSum += n; if (map[preSum - k]) { count += map[preSum - k]; } if (map[preSum]) { map[preSum] += 1; } else { map[preSum] = 1; } } return count; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T13:55:21.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-10-23T13:55:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前缀+哈希\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-23T13:55:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"例题 1 —— 和为 K 的子数组","slug":"例题-1-——-和为-k-的子数组","link":"#例题-1-——-和为-k-的子数组","children":[]},{"level":2,"title":"例题 2 —— 字母与数字","slug":"例题-2-——-字母与数字","link":"#例题-2-——-字母与数字","children":[]}],"git":{"createdTime":1729691721000,"updatedTime":1729691721000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.23,"words":369},"filePathRelative":"算法题/前缀和/2.前缀+哈希.md","localizedDate":"2024年10月23日","excerpt":"<h2> 思路</h2>\\n<p>前缀和通常会与哈希表一起使用，比如当访问到某个位置的前缀和时，如果存在前缀和与目标元素的差值存在于哈希表中，那么说明存在满足的条件</p>\\n<h2> 例题 1 —— 和为 K 的子数组</h2>\\n<p>思路：比如对于 i 位置，如果存在位置 k<code>(k&lt;i)</code> 如果存在 <code>prefix[i]-prefix[k]==k</code>，那么说明存在满足条件的情况</p>\\n<p>那么 k+1-i 的区间长度就是满足条件的子数组的长度</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">subarraySum</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums<span class=\\"token punctuation\\">,</span> k</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 当preSum[i] 就等于k时，次数+1 因此初始化map[0]为1</span>\\n  <span class=\\"token keyword\\">let</span> map <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">0</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> preSum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> n <span class=\\"token keyword\\">of</span> nums<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    preSum <span class=\\"token operator\\">+=</span> n<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>preSum <span class=\\"token operator\\">-</span> k<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      count <span class=\\"token operator\\">+=</span> map<span class=\\"token punctuation\\">[</span>preSum <span class=\\"token operator\\">-</span> k<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">[</span>preSum<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">[</span>preSum<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">[</span>preSum<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> count<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
