import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-e7adc1e1.js";const t={},e=p(`<h2 id="简化" tabindex="-1"><a class="header-anchor" href="#简化" aria-hidden="true">#</a> 简化</h2><p>二维 dp 数组是从物品和背包两个维度进行构造，实际上只需要一维数组也可以完成相同的目的，因为实际只需要二维 dp 中的每一行</p><p>dp[i] 容量为 j 的背包所背的最大价值</p><p>递推公式的思路与上一题一样，放或不放</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化：全部赋 0</p><p>重点：先遍历物品，再遍历背包，每次更新 dp[j]的值（实际上 dp[j]就等于二维 dp 数组中的一行，比如当 i=0，那么 dp[j]就等于二维数组 dp[0]的这一行；当 i=1，那么 dp[j]就等于二维数组 dp[1]的这一行</p><p>注意：并且在遍历背包时要倒序遍历，防止一个状态被多次使用</p><p>由递归公式可知：当 j&gt;=weight[i]时，就需要考虑放入问题</p><p>正序： 当 j = weight[i]，假设放入物品 i 时价值最大，则 dp[j] = dp[j - weight[i]] + value[i] 当 j = weight[i]+1，同时是 dp[j] = dp[j - weight[i]] + value[i]，那么此时相当于物品 i 被放入了两次</p><p>倒序就不存在这一问题</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">testWeightBagProblem</span><span class="token punctuation">(</span><span class="token parameter">wight<span class="token punctuation">,</span> value<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> weight<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    <span class="token comment">//   一维dp数组</span>
    dp <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重点:倒序,且只需要判断j&gt;=weight[i]即可，否则不会发生变化（因为重量不能放入）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> size<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(i,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","8.01背包-一维数组.html.vue"]]);export{r as default};
