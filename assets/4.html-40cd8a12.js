const t=JSON.parse('{"key":"v-66eee45e","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.html","title":"实现 strStr()-KMP算法","lang":"zh-CN","frontmatter":{"title":"实现 strStr()-KMP算法","order":4,"category":["算法题","字符串"],"description":"链接 (链接)[https://www.programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE] 思路 暴力搜索滑动窗口：每次查询都是独立的，无法利用上次的查询信息，最差的情况时间复杂度可达 O(n * M) KMP-算法：可以利用上一次的查询信息 首先查找主串和子串是否存在共同部分 如果存在共同部分，查找共同部分中最长的相等前后缀数(next 表) 最长的相等前后缀数就表示下一次比较中子串开始的位置 kmp整体思路 next计算方法","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/4.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"实现 strStr()-KMP算法"}],["meta",{"property":"og:description","content":"链接 (链接)[https://www.programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE] 思路 暴力搜索滑动窗口：每次查询都是独立的，无法利用上次的查询信息，最差的情况时间复杂度可达 O(n * M) KMP-算法：可以利用上一次的查询信息 首先查找主串和子串是否存在共同部分 如果存在共同部分，查找共同部分中最长的相等前后缀数(next 表) 最长的相等前后缀数就表示下一次比较中子串开始的位置 kmp整体思路 next计算方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现 strStr()-KMP算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.46,"words":439},"filePathRelative":"算法题/字符串/4.md","localizedDate":"2024年1月21日","excerpt":"<h2> 链接</h2>\\n<p>(链接)[https://www.programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE]</p>\\n<h2> 思路</h2>\\n<ol>\\n<li>\\n<p>暴力搜索滑动窗口：每次查询都是独立的，无法利用上次的查询信息，最差的情况时间复杂度可达 O(n * M)</p>\\n</li>\\n<li>\\n<p>KMP-算法：可以利用上一次的查询信息</p>\\n</li>\\n</ol>\\n<ul>\\n<li>\\n<p>首先查找主串和子串是否存在共同部分</p>\\n</li>\\n<li>\\n<p>如果存在共同部分，查找共同部分中最长的相等前后缀数(next 表)</p>\\n</li>\\n<li>\\n<p>最长的相等前后缀数就表示下一次比较中子串开始的位置</p>\\n<figure><img src=\\"/assets/images/字符串/kmp-1.jpg\\" alt=\\"kmp整体思路\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>kmp整体思路</figcaption></figure>\\n<figure><img src=\\"/assets/images/字符串/kmp-2.jpg\\" alt=\\"next计算方法\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>next计算方法</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
