const n=JSON.parse('{"key":"v-637d502d","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/14.html","title":"二叉搜索树中的插入操作","lang":"zh-CN","frontmatter":{"title":"二叉搜索树中的插入操作","order":14,"category":["算法题","二叉树"],"description":"题目链接 二叉搜索树中的插入操作 思路 注意：插入是插入到叶子结点后面 思路：递归重构每个节点的 left 和 right,根据 BST 的顺序，将 val 的值不断向下传递到对应的叶子节点，再比较插入到该节点的左侧还是右侧 实现 function insertIntoBST(root: TreeNode | null, val: number): TreeNode | null { // 只有当root为空的时候才进行插入操作，说明到达了叶子节点 if (root === null) return new TreeNode(val); // 小于当前node的值，向左传递 if (root.val &gt; val) { root.left = insertIntoBST(root.left, val); } else { root.right = insertIntoBST(root.right, val); } // 没到达叶子节点就返回当前节点，保持树原本的结构 return root; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/14.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"二叉搜索树中的插入操作"}],["meta",{"property":"og:description","content":"题目链接 二叉搜索树中的插入操作 思路 注意：插入是插入到叶子结点后面 思路：递归重构每个节点的 left 和 right,根据 BST 的顺序，将 val 的值不断向下传递到对应的叶子节点，再比较插入到该节点的左侧还是右侧 实现 function insertIntoBST(root: TreeNode | null, val: number): TreeNode | null { // 只有当root为空的时候才进行插入操作，说明到达了叶子节点 if (root === null) return new TreeNode(val); // 小于当前node的值，向左传递 if (root.val &gt; val) { root.left = insertIntoBST(root.left, val); } else { root.right = insertIntoBST(root.right, val); } // 没到达叶子节点就返回当前节点，保持树原本的结构 return root; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉搜索树中的插入操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"算法题/二叉树/14.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/insert-into-a-binary-search-tree/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二叉搜索树中的插入操作</a></p>\\n<h2> 思路</h2>\\n<p>注意：插入是插入到叶子结点后面<br>\\n思路：递归重构每个节点的 left 和 right,根据 BST 的顺序，将 val 的值不断向下传递到对应的叶子节点，再比较插入到该节点的左侧还是右侧</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">insertIntoBST</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">root</span><span class=\\"token operator\\">:</span> TreeNode <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">val</span><span class=\\"token operator\\">:</span> number</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> TreeNode <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 只有当root为空的时候才进行插入操作，说明到达了叶子节点</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 小于当前node的值，向左传递</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">&gt;</span> val<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">insertIntoBST</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">insertIntoBST</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 没到达叶子节点就返回当前节点，保持树原本的结构</span>\\n  <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
