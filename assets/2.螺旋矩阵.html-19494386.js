const n=JSON.parse('{"key":"v-3c67cd08","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E7%9F%A9%E9%98%B5/2.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html","title":"螺旋矩阵","lang":"zh-CN","frontmatter":{"title":"螺旋矩阵","order":2,"category":["算法题","矩形"],"description":"题目链接 [题目链接](https://leetcode.cn/problems /spiral-matrix/submissions/532046207/?envType=study-plan-v2&amp;envId=top-interview-150) 思路 模拟： 如果矩形能成环，就从外层开始遍历，一层一层去掉最外层的环（左-右，上-下，右-左，左-上） 直到只剩一行/一列/一个元素 实现 var spiralOrder = function (matrix) { if (matrix.length == 0) return []; let top = 0, left = 0, bottom = matrix.length - 1, right = matrix[0].length - 1; const res = []; // 如果能成环，从外圈一层一层遍历 while (top &lt; bottom &amp;&amp; left &lt; right) { // 左闭右开 for (let i = left; i &lt; right; i++) { res.push(matrix[top][i]); } for (let i = top; i &lt; bottom; i++) { res.push(matrix[i][right]); } for (let i = right; i &gt; left; i--) res.push(matrix[bottom][i]); // 下层 for (let i = bottom; i &gt; top; i--) res.push(matrix[i][left]); // 左层 // 四个边界同时收缩，进入内层 right--; top++; bottom--; left++; } // 如果不能成环,只剩一行/一列/一个元素 // 一行 if (top == bottom) { for (let i = left; i &lt;= right; i++) { res.push(matrix[top][i]); } } // 一列 else if (left == right) { for (let i = top; i &lt;= bottom; i++) { res.push(matrix[i][left]); } } return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E7%9F%A9%E9%98%B5/2.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"螺旋矩阵"}],["meta",{"property":"og:description","content":"题目链接 [题目链接](https://leetcode.cn/problems /spiral-matrix/submissions/532046207/?envType=study-plan-v2&amp;envId=top-interview-150) 思路 模拟： 如果矩形能成环，就从外层开始遍历，一层一层去掉最外层的环（左-右，上-下，右-左，左-上） 直到只剩一行/一列/一个元素 实现 var spiralOrder = function (matrix) { if (matrix.length == 0) return []; let top = 0, left = 0, bottom = matrix.length - 1, right = matrix[0].length - 1; const res = []; // 如果能成环，从外圈一层一层遍历 while (top &lt; bottom &amp;&amp; left &lt; right) { // 左闭右开 for (let i = left; i &lt; right; i++) { res.push(matrix[top][i]); } for (let i = top; i &lt; bottom; i++) { res.push(matrix[i][right]); } for (let i = right; i &gt; left; i--) res.push(matrix[bottom][i]); // 下层 for (let i = bottom; i &gt; top; i--) res.push(matrix[i][left]); // 左层 // 四个边界同时收缩，进入内层 right--; top++; bottom--; left++; } // 如果不能成环,只剩一行/一列/一个元素 // 一行 if (top == bottom) { for (let i = left; i &lt;= right; i++) { res.push(matrix[top][i]); } } // 一列 else if (left == right) { for (let i = top; i &lt;= bottom; i++) { res.push(matrix[i][left]); } } return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T13:43:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-10-23T13:43:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"螺旋矩阵\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-23T13:43:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1717675393000,"updatedTime":1729691029000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1},{"name":"‘TX7’","email":"‘1224745953@qq.com’","commits":1}]},"readingTime":{"minutes":0.87,"words":261},"filePathRelative":"算法题/矩阵/2.螺旋矩阵.md","localizedDate":"2024年6月6日","excerpt":"<h2> 题目链接</h2>\\n<p>[题目链接](https://leetcode.cn/problems /spiral-matrix/submissions/532046207/?envType=study-plan-v2&amp;envId=top-interview-150)</p>\\n<h2> 思路</h2>\\n<p>模拟：</p>\\n<ol>\\n<li>如果矩形能成环，就从外层开始遍历，一层一层去掉最外层的环（左-右，上-下，右-左，左-上）</li>\\n<li>直到只剩一行/一列/一个元素</li>\\n</ol>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">spiralOrder</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">matrix</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> top <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    left <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    bottom <span class=\\"token operator\\">=</span> matrix<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n    right <span class=\\"token operator\\">=</span> matrix<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 如果能成环，从外圈一层一层遍历</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>top <span class=\\"token operator\\">&lt;</span> bottom <span class=\\"token operator\\">&amp;&amp;</span> left <span class=\\"token operator\\">&lt;</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 左闭右开</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> left<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> right<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>top<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> top<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> bottom<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> right<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;</span> left<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>bottom<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 下层</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> bottom<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;</span> top<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 左层</span>\\n    <span class=\\"token comment\\">// 四个边界同时收缩，进入内层</span>\\n    right<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    top<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    bottom<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 如果不能成环,只剩一行/一列/一个元素</span>\\n  <span class=\\"token comment\\">// 一行</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>top <span class=\\"token operator\\">==</span> bottom<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> left<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> right<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>top<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 一列</span>\\n  <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">==</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> top<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> bottom<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>matrix<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
