const n=JSON.parse('{"key":"v-48a776ea","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/7.html","title":"路径总和","lang":"zh-CN","frontmatter":{"title":"路径总和","order":7,"category":["算法题","二叉树"],"description":"题目连接 路径总和 思路 注意：在传递路径时要通过深拷贝进行，否则所有的 path 指向同一个 实现 var pathSum = function (root, targetSum) { let res = []; if (!root) { return res; } const getsum = (node, sum, path) =&gt; { if (!node.left &amp;&amp; !node.right) { path.push(node.val); sum += node.val; if (sum == targetSum) { // 深拷贝：重新赋值一个array res.push([...path]); } return; } path.push(node.val); sum += node.val; // 这里一定要采取深拷贝，否则path会同时变化 node.left &amp;&amp; getsum(node.left, sum, [...path]); node.right &amp;&amp; getsum(node.right, sum, [...path]); }; getsum(root, 0, []); return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/7.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"路径总和"}],["meta",{"property":"og:description","content":"题目连接 路径总和 思路 注意：在传递路径时要通过深拷贝进行，否则所有的 path 指向同一个 实现 var pathSum = function (root, targetSum) { let res = []; if (!root) { return res; } const getsum = (node, sum, path) =&gt; { if (!node.left &amp;&amp; !node.right) { path.push(node.val); sum += node.val; if (sum == targetSum) { // 深拷贝：重新赋值一个array res.push([...path]); } return; } path.push(node.val); sum += node.val; // 这里一定要采取深拷贝，否则path会同时变化 node.left &amp;&amp; getsum(node.left, sum, [...path]); node.right &amp;&amp; getsum(node.right, sum, [...path]); }; getsum(root, 0, []); return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路径总和\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目连接","slug":"题目连接","link":"#题目连接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.45,"words":136},"filePathRelative":"算法题/二叉树/7.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目连接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/path-sum-ii/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">路径总和</a></p>\\n<h2> 思路</h2>\\n<p>注意：在传递路径时要通过深拷贝进行，否则所有的 path 指向同一个</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">pathSum</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root<span class=\\"token punctuation\\">,</span> targetSum</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">getsum</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node<span class=\\"token punctuation\\">,</span> sum<span class=\\"token punctuation\\">,</span> path</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>node<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      sum <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sum <span class=\\"token operator\\">==</span> targetSum<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 深拷贝：重新赋值一个array</span>\\n        res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>path<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    sum <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 这里一定要采取深拷贝，否则path会同时变化</span>\\n    node<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">getsum</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> sum<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>path<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">getsum</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> sum<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>path<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">getsum</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
