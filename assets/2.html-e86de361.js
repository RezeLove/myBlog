const n=JSON.parse('{"key":"v-7d4846d8","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/1.%E7%BB%84%E5%90%88/2.html","title":"组合3","lang":"zh-CN","frontmatter":{"title":"组合3","order":2,"category":["算法题","组合","回溯"],"description":"题目链接 组合 3 思路 与上一题组合类似，多了总和的限制条件 实现 var combinationSum3 = function (k, n) { let res = []; // 因为会回溯，所以可使用函数作用域的变量 let path = []; let sum = 0; const backTrack = (index, path) =&gt; { // 剪枝策略，大于目标就退出 if (sum &gt; n) { return; } //找到k个就返回 if (path.length == k) { if (sum == n) { res.push([...path]); } return; } for (let i = index; i &lt;= 9 - k + path.length + 1; i++) { path.push(i); sum += i; backTrack(i + 1, path); // 回溯 sum -= i; path.pop(); } }; backTrack(1, path); return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/1.%E7%BB%84%E5%90%88/2.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"组合3"}],["meta",{"property":"og:description","content":"题目链接 组合 3 思路 与上一题组合类似，多了总和的限制条件 实现 var combinationSum3 = function (k, n) { let res = []; // 因为会回溯，所以可使用函数作用域的变量 let path = []; let sum = 0; const backTrack = (index, path) =&gt; { // 剪枝策略，大于目标就退出 if (sum &gt; n) { return; } //找到k个就返回 if (path.length == k) { if (sum == n) { res.push([...path]); } return; } for (let i = index; i &lt;= 9 - k + path.length + 1; i++) { path.push(i); sum += i; backTrack(i + 1, path); // 回溯 sum -= i; path.pop(); } }; backTrack(1, path); return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合3\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.48,"words":144},"filePathRelative":"算法题/回溯/1.组合/2.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/combination-sum-iii/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">组合 3</a></p>\\n<h2> 思路</h2>\\n<p>与上一题组合类似，多了总和的限制条件</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">combinationSum3</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">k<span class=\\"token punctuation\\">,</span> n</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 因为会回溯，所以可使用函数作用域的变量</span>\\n  <span class=\\"token keyword\\">let</span> path <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> sum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">backTrack</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index<span class=\\"token punctuation\\">,</span> path</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 剪枝策略，大于目标就退出</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sum <span class=\\"token operator\\">&gt;</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//找到k个就返回</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> k<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sum <span class=\\"token operator\\">==</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>path<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> index<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">9</span> <span class=\\"token operator\\">-</span> k <span class=\\"token operator\\">+</span> path<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      sum <span class=\\"token operator\\">+=</span> i<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token function\\">backTrack</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 回溯</span>\\n      sum <span class=\\"token operator\\">-=</span> i<span class=\\"token punctuation\\">;</span>\\n      path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">backTrack</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
