const n=JSON.parse('{"key":"v-04228ca7","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E9%93%BE%E8%A1%A8/3.html","title":"定义链表","lang":"zh-CN","frontmatter":{"title":"定义链表","order":3,"category":["算法题","链表"],"description":"题目链接 链接 思路 查询第 index 结点的值：从头结点开始 next index 次 实现 class LinkNode { constructor(val, next) { val ? (this.val = val) : 0; next ? (this.next = next) : null; } } var MyLinkedList = function (val, next) { this.size = 0; // this.tail和head是两个node this.tail = null; this.head = null; }; /** * @param {number} index * @return {node} */ MyLinkedList.prototype.getNode = function (index) { if (this.size == 0 || index &gt;= this.size) { return null; } //0-&gt;head let temp = new LinkNode(0, this.head); while (index &gt;= 0) { temp = temp.next; index--; } return temp; }; /** * @param {number} index * @return {number} */ MyLinkedList.prototype.get = function (index) { if (index &lt; 0 || index &gt;= this._size) return -1; // 获取当前节点 return this.getNode(index).val; }; /** * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtHead = function (val) { const newNode = new LinkNode(val, this.head); this.head = newNode; this.size++; //没有tail说明之前没有元素 if (!this.tail) { this.tail = newNode; } }; /** * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtTail = function (val) { const newNode = new LinkNode(val); this.size++; if (this.tail) { this.tail.next = newNode; this.tail = newNode; return; } //没有tail说明是的链表 this.tail = newNode; this.head = newNode; }; /** * @param {number} index * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtIndex = function (index, val) { if (index &lt;= 0) { this.addAtHead(val); return; } if (index == this.size) { this.addAtTail(val); return; } if (index &gt; this.size) { return; } let first = this.getNode(index - 1); let second = first.next; let node = new LinkNode(val, second); first.next = node; this.size++; }; /** * @param {number} index * @return {void} */ MyLinkedList.prototype.deleteAtIndex = function (index) { if (index &gt;= this.size || index &lt; 0) { return; } if (index == 0) { this.head = this.head.next; // 如果删除的这个节点同时是尾节点，要处理尾节点 if (index === this._size - 1) { this._tail = this._head; } this.size--; return; } // 处理尾结点 if (index == this.size - 1) { this.tail = this.getNode(index - 1); this.size--; return; } let node = this.getNode(index - 1); node.next = this.getNode(index + 1); this.size--; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E9%93%BE%E8%A1%A8/3.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"定义链表"}],["meta",{"property":"og:description","content":"题目链接 链接 思路 查询第 index 结点的值：从头结点开始 next index 次 实现 class LinkNode { constructor(val, next) { val ? (this.val = val) : 0; next ? (this.next = next) : null; } } var MyLinkedList = function (val, next) { this.size = 0; // this.tail和head是两个node this.tail = null; this.head = null; }; /** * @param {number} index * @return {node} */ MyLinkedList.prototype.getNode = function (index) { if (this.size == 0 || index &gt;= this.size) { return null; } //0-&gt;head let temp = new LinkNode(0, this.head); while (index &gt;= 0) { temp = temp.next; index--; } return temp; }; /** * @param {number} index * @return {number} */ MyLinkedList.prototype.get = function (index) { if (index &lt; 0 || index &gt;= this._size) return -1; // 获取当前节点 return this.getNode(index).val; }; /** * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtHead = function (val) { const newNode = new LinkNode(val, this.head); this.head = newNode; this.size++; //没有tail说明之前没有元素 if (!this.tail) { this.tail = newNode; } }; /** * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtTail = function (val) { const newNode = new LinkNode(val); this.size++; if (this.tail) { this.tail.next = newNode; this.tail = newNode; return; } //没有tail说明是的链表 this.tail = newNode; this.head = newNode; }; /** * @param {number} index * @param {number} val * @return {void} */ MyLinkedList.prototype.addAtIndex = function (index, val) { if (index &lt;= 0) { this.addAtHead(val); return; } if (index == this.size) { this.addAtTail(val); return; } if (index &gt; this.size) { return; } let first = this.getNode(index - 1); let second = first.next; let node = new LinkNode(val, second); first.next = node; this.size++; }; /** * @param {number} index * @return {void} */ MyLinkedList.prototype.deleteAtIndex = function (index) { if (index &gt;= this.size || index &lt; 0) { return; } if (index == 0) { this.head = this.head.next; // 如果删除的这个节点同时是尾节点，要处理尾节点 if (index === this._size - 1) { this._tail = this._head; } this.size--; return; } // 处理尾结点 if (index == this.size - 1) { this.tail = this.getNode(index - 1); this.size--; return; } let node = this.getNode(index - 1); node.next = this.getNode(index + 1); this.size--; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定义链表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.35,"words":405},"filePathRelative":"算法题/链表/3.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/design-linked-list/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">链接</a></p>\\n<h2> 思路</h2>\\n<p>查询第 index 结点的值：从头结点开始 next index 次</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LinkNode</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val<span class=\\"token punctuation\\">,</span> next</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    val <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">=</span> val<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    next <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> next<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">MyLinkedList</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val<span class=\\"token punctuation\\">,</span> next</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// this.tail和head是两个node</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">index</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>node<span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">getNode</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> index <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">//0-&gt;head</span>\\n  <span class=\\"token keyword\\">let</span> temp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    temp <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n    index<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> temp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">index</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">get</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> index <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_size<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 获取当前节点</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getNode</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">val</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">addAtHead</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> newNode <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkNode</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//没有tail说明之前没有元素</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">val</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">addAtTail</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> newNode <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkNode</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">//没有tail说明是的链表</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> newNode<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">index</span>\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">val</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">addAtIndex</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index<span class=\\"token punctuation\\">,</span> val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addAtHead</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addAtTail</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">let</span> first <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getNode</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> second <span class=\\"token operator\\">=</span> first<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> node <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkNode</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">,</span> second<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  first<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">index</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MyLinkedList</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">deleteAtIndex</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">||</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>head<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 如果删除的这个节点同时是尾节点，要处理尾节点</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_size <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_tail <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_head<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 处理尾结点</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>tail <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getNode</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">let</span> node <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getNode</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  node<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getNode</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>size<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
