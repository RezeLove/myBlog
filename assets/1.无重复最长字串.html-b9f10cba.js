const n=JSON.parse('{"key":"v-fff2f994","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2.html","title":"无重复最长字串","lang":"zh-CN","frontmatter":{"title":"无重复最长字串","order":1,"category":["算法题","字符串","滑动窗口"],"description":"题目链接 无重复最长字串 思路 子串是连续的字符串，对于字串问题，可以使用滑动窗口 当滑动窗口遇到重复元素时，就将左侧区间移动重复元素后面，比较区间的最大长度 实现 var lengthOfLongestSubstring = function (s) { let left = 0, right = 1, len = right - left; for (let i = 1; i &lt; s.length; i++) { // 在滑动区间内找是否存在重复元素 let findIndex = s.slice(left, right).indexOf(s[i]); // 存在 if (findIndex &gt; -1) { // 将左侧区间移动到重复元素后 left = left + findIndex + 1; } right++; let curLen = right - left; len = curLen &gt; len ? curLen : len; } return len; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"无重复最长字串"}],["meta",{"property":"og:description","content":"题目链接 无重复最长字串 思路 子串是连续的字符串，对于字串问题，可以使用滑动窗口 当滑动窗口遇到重复元素时，就将左侧区间移动重复元素后面，比较区间的最大长度 实现 var lengthOfLongestSubstring = function (s) { let left = 0, right = 1, len = right - left; for (let i = 1; i &lt; s.length; i++) { // 在滑动区间内找是否存在重复元素 let findIndex = s.slice(left, right).indexOf(s[i]); // 存在 if (findIndex &gt; -1) { // 将左侧区间移动到重复元素后 left = left + findIndex + 1; } right++; let curLen = right - left; len = curLen &gt; len ? curLen : len; } return len; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T09:44:36.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-07T09:44:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"无重复最长字串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T09:44:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1709804676000,"updatedTime":1709804676000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.6,"words":180},"filePathRelative":"算法题/字符串/滑动窗口/1.无重复最长字串.md","localizedDate":"2024年3月7日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">无重复最长字串</a></p>\\n<h2> 思路</h2>\\n<p>子串是连续的字符串，对于字串问题，可以使用滑动窗口</p>\\n<p>当滑动窗口遇到重复元素时，就将左侧区间移动重复元素后面，比较区间的最大长度</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">lengthOfLongestSubstring</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">s</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> left <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n    right <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n    len <span class=\\"token operator\\">=</span> right <span class=\\"token operator\\">-</span> left<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> s<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 在滑动区间内找是否存在重复元素</span>\\n    <span class=\\"token keyword\\">let</span> findIndex <span class=\\"token operator\\">=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 存在</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>findIndex <span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 将左侧区间移动到重复元素后</span>\\n      left <span class=\\"token operator\\">=</span> left <span class=\\"token operator\\">+</span> findIndex <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    right<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> curLen <span class=\\"token operator\\">=</span> right <span class=\\"token operator\\">-</span> left<span class=\\"token punctuation\\">;</span>\\n    len <span class=\\"token operator\\">=</span> curLen <span class=\\"token operator\\">&gt;</span> len <span class=\\"token operator\\">?</span> curLen <span class=\\"token operator\\">:</span> len<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> len<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
