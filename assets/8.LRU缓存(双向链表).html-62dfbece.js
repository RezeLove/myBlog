const e=JSON.parse('{"key":"v-4638a3e0","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E9%93%BE%E8%A1%A8/8.LRU%E7%BC%93%E5%AD%98(%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8).html","title":"LRU缓存","lang":"zh-CN","frontmatter":{"title":"LRU缓存","order":8,"category":["算法题","双向链表"],"description":"题目链接 LRU 缓存 思路 数据结构的选择： map+array:map 存储 key 和 value，array 维护操作顺序。 缺点：array 的插入/移动/删除的复杂度都为 O(n) map+双向链表：map 存储 key 和 key 对应的 node；双向链表存储 key 和 val。 优点：双向链表的移动和删除都是指针的变化，复杂度为 O(1)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E9%93%BE%E8%A1%A8/8.LRU%E7%BC%93%E5%AD%98(%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8).html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"LRU缓存"}],["meta",{"property":"og:description","content":"题目链接 LRU 缓存 思路 数据结构的选择： map+array:map 存储 key 和 value，array 维护操作顺序。 缺点：array 的插入/移动/删除的复杂度都为 O(n) map+双向链表：map 存储 key 和 key 对应的 node；双向链表存储 key 和 val。 优点：双向链表的移动和删除都是指针的变化，复杂度为 O(1)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T07:58:58.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-06T07:58:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LRU缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-06T07:58:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1712390338000,"updatedTime":1712390338000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"算法题/链表/8.LRU缓存(双向链表).md","localizedDate":"2024年4月6日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/lru-cache/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LRU 缓存</a></p>\\n<h2> 思路</h2>\\n<p>数据结构的选择：</p>\\n<ol>\\n<li>\\n<p>map+array:map 存储 key 和 value，array 维护操作顺序。 缺点：array 的插入/移动/删除的复杂度都为 O(n)</p>\\n</li>\\n<li>\\n<p>map+双向链表：map 存储 key 和 key 对应的 node；双向链表存储 key 和 val。 优点：双向链表的移动和删除都是指针的变化，复杂度为 O(1)</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
