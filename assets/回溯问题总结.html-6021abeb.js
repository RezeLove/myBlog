const n=JSON.parse('{"key":"v-76880e80","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html","title":"回溯问题总结","lang":"zh-CN","frontmatter":{"title":"回溯问题总结","order":1,"category":["算法题","回溯"],"description":"题型 子集型 组合型 排列型 子集型和组合型 子集型和组合型本质是一类问题，组合型是在子集型的基础上增加一些限制条件（可进行剪枝） 可以从输入的视角（选或不选）或者答案的视角进行考虑 子集 选或不选 var subsets = function (nums) { const res = []; const lookBack = (path, i) =&gt; { if (i === nums.length) { res.push([...path]); return; } // 不选 lookBack(path, i + 1); // 选 path.push(nums[i]); lookBack(path, i + 1); path.pop(); }; lookBack([], 0); return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"回溯问题总结"}],["meta",{"property":"og:description","content":"题型 子集型 组合型 排列型 子集型和组合型 子集型和组合型本质是一类问题，组合型是在子集型的基础上增加一些限制条件（可进行剪枝） 可以从输入的视角（选或不选）或者答案的视角进行考虑 子集 选或不选 var subsets = function (nums) { const res = []; const lookBack = (path, i) =&gt; { if (i === nums.length) { res.push([...path]); return; } // 不选 lookBack(path, i + 1); // 选 path.push(nums[i]); lookBack(path, i + 1); path.pop(); }; lookBack([], 0); return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-18T01:56:39.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-09-18T01:56:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯问题总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-18T01:56:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题型","slug":"题型","link":"#题型","children":[]},{"level":2,"title":"子集型和组合型","slug":"子集型和组合型","link":"#子集型和组合型","children":[]},{"level":2,"title":"排列型","slug":"排列型","link":"#排列型","children":[]}],"git":{"createdTime":1726624599000,"updatedTime":1726624599000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":2.57,"words":771},"filePathRelative":"算法题/回溯/回溯问题总结.md","localizedDate":"2024年9月18日","excerpt":"<h2> 题型</h2>\\n<ol>\\n<li>子集型</li>\\n<li>组合型</li>\\n<li>排列型</li>\\n</ol>\\n<h2> 子集型和组合型</h2>\\n<p>子集型和组合型本质是一类问题，组合型是在子集型的基础上增加一些限制条件（可进行剪枝）</p>\\n<p>可以从输入的视角（选或不选）或者答案的视角进行考虑</p>\\n<p><a href=\\"\\">子集</a></p>\\n<ol>\\n<li>选或不选</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">subsets</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">lookBack</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">path<span class=\\"token punctuation\\">,</span> i</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">===</span> nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>path<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 不选</span>\\n    <span class=\\"token function\\">lookBack</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 选</span>\\n    path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">lookBack</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">lookBack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
