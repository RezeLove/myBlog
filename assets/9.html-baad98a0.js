const n=JSON.parse('{"key":"v-41d4146e","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/9.html","title":"最大二叉树","lang":"zh-CN","frontmatter":{"title":"最大二叉树","order":9,"category":["算法题","二叉树"],"description":"题目链接 题目链接 思路 找到数组中最大的元素及对应索引 将数组一分为二，左右左树和右树的数组 递归 实现 var constructMaximumBinaryTree = function (nums) { // 递归结束条件 if (!nums.length) { return null; } // 找到最大元素及索引 let max = Math.max(...nums); let index = nums.indexOf(max); const root = new TreeNode(max); let left = nums.slice(0, index); let right = nums.slice(index + 1); // 递归构建左树和右树 root.left = constructMaximumBinaryTree(left); root.right = constructMaximumBinaryTree(right); return root; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/9.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"最大二叉树"}],["meta",{"property":"og:description","content":"题目链接 题目链接 思路 找到数组中最大的元素及对应索引 将数组一分为二，左右左树和右树的数组 递归 实现 var constructMaximumBinaryTree = function (nums) { // 递归结束条件 if (!nums.length) { return null; } // 找到最大元素及索引 let max = Math.max(...nums); let index = nums.indexOf(max); const root = new TreeNode(max); let left = nums.slice(0, index); let right = nums.slice(index + 1); // 递归构建左树和右树 root.left = constructMaximumBinaryTree(left); root.right = constructMaximumBinaryTree(right); return root; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最大二叉树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.45,"words":135},"filePathRelative":"算法题/二叉树/9.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/maximum-binary-tree/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">题目链接</a></p>\\n<h2> 思路</h2>\\n<ol>\\n<li>找到数组中最大的元素及对应索引</li>\\n<li>将数组一分为二，左右左树和右树的数组</li>\\n<li>递归</li>\\n</ol>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">constructMaximumBinaryTree</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 递归结束条件</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 找到最大元素及索引</span>\\n  <span class=\\"token keyword\\">let</span> max <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>nums<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> index <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span>max<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> root <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span>max<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> left <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> index<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> right <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 递归构建左树和右树</span>\\n  root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">constructMaximumBinaryTree</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">constructMaximumBinaryTree</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
