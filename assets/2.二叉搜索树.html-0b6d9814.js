const n=JSON.parse('{"key":"v-392ce0c5","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/2.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html","title":"满二叉树/完全二叉树","lang":"zh-CN","frontmatter":{"title":"满二叉树/完全二叉树","order":1,"category":["算法题","二叉树"],"description":"思路 二叉搜索树的特点是中序遍历后是按顺序从小到大排序的，因此对数组排序后，中间节点就是根节点，根据这个特点来构建二叉搜索树 实现 class TreeNode { constructor(value) { this.value = value; // 节点的值 this.left = null; // 左孩子节点 this.right = null; // 右孩子节点 } } const sortedArrayToBST = (nums) =&gt; { const buildBST = (nums, start, end) =&gt; { if (start &gt; end) return null; // 拿到根节点：中间节点 const mid = Math.floor((start + end) / 2); const root = new TreeNode(nums[mid]); // 左右子树仍然是二叉搜索树，递归 root.left = buildBST(nums, start, mid - 1); root.right = buildBST(nums, mid + 1, end); return root; }; return buildBST(nums, 0, nums.length - 1); }; // Example usage: const nums = [1, 2, 3, 4, 5, 6, 7]; const root = sortedArrayToBST(nums); console.log(root);","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/2.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"满二叉树/完全二叉树"}],["meta",{"property":"og:description","content":"思路 二叉搜索树的特点是中序遍历后是按顺序从小到大排序的，因此对数组排序后，中间节点就是根节点，根据这个特点来构建二叉搜索树 实现 class TreeNode { constructor(value) { this.value = value; // 节点的值 this.left = null; // 左孩子节点 this.right = null; // 右孩子节点 } } const sortedArrayToBST = (nums) =&gt; { const buildBST = (nums, start, end) =&gt; { if (start &gt; end) return null; // 拿到根节点：中间节点 const mid = Math.floor((start + end) / 2); const root = new TreeNode(nums[mid]); // 左右子树仍然是二叉搜索树，递归 root.left = buildBST(nums, start, mid - 1); root.right = buildBST(nums, mid + 1, end); return root; }; return buildBST(nums, 0, nums.length - 1); }; // Example usage: const nums = [1, 2, 3, 4, 5, 6, 7]; const root = sortedArrayToBST(nums); console.log(root);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T06:47:17.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-27T06:47:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"满二叉树/完全二叉树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-27T06:47:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1714200437000,"updatedTime":1714200437000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"算法题/二叉树/数组构建二叉树/2.二叉搜索树.md","localizedDate":"2024年4月27日","excerpt":"<h2> 思路</h2>\\n<p>二叉搜索树的特点是中序遍历后是按顺序从小到大排序的，因此对数组排序后，中间节点就是根节点，根据这个特点来构建二叉搜索树</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeNode</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 节点的值</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 左孩子节点</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 右孩子节点</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">sortedArrayToBST</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">buildBST</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> end</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">&gt;</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 拿到根节点：中间节点</span>\\n    <span class=\\"token keyword\\">const</span> mid <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">+</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> root <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 左右子树仍然是二叉搜索树，递归</span>\\n    root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">buildBST</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">buildBST</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> root<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">buildBST</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Example usage:</span>\\n<span class=\\"token keyword\\">const</span> nums <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> root <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sortedArrayToBST</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
