const n=JSON.parse('{"key":"v-74842947","path":"/vue-learn/%E5%93%8D%E5%BA%94%E5%BC%8F/4.html","title":"四、vue3的响应性核心Proxy","lang":"zh-CN","frontmatter":{"title":"四、vue3的响应性核心Proxy","icon":"laptop-code","order":4,"category":["使用指南"],"description":"Proxy Proxy 可以对对象进行代理,代理对象的每个属性都可以触发 get 和 set，还可以监听到属性的添加和删除 const origin = { name: \\"ytx\\", age: \\"23\\", count: 10, price: 5, }; const proxy = new Proxy(origin, { // 被代理对象，key,新值,代理对象 set(target, key, value, recevier) { console.log(\\"setter\\"); target[key] = value; console.log(target, key, value, recevier); return true; }, get(target, key, recevier) { console.log(\\"getter\\"); console.log(target, key, recevier); }, }); // 通过代理对象才可以触发set和get proxy.name; proxy.get; // 可以触发set proxy.add = \\"new\\";","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue-learn/%E5%93%8D%E5%BA%94%E5%BC%8F/4.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"四、vue3的响应性核心Proxy"}],["meta",{"property":"og:description","content":"Proxy Proxy 可以对对象进行代理,代理对象的每个属性都可以触发 get 和 set，还可以监听到属性的添加和删除 const origin = { name: \\"ytx\\", age: \\"23\\", count: 10, price: 5, }; const proxy = new Proxy(origin, { // 被代理对象，key,新值,代理对象 set(target, key, value, recevier) { console.log(\\"setter\\"); target[key] = value; console.log(target, key, value, recevier); return true; }, get(target, key, recevier) { console.log(\\"getter\\"); console.log(target, key, recevier); }, }); // 通过代理对象才可以触发set和get proxy.name; proxy.get; // 可以触发set proxy.add = \\"new\\";"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"四、vue3的响应性核心Proxy\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Proxy","slug":"proxy","link":"#proxy","children":[]},{"level":2,"title":"Reflect","slug":"reflect","link":"#reflect","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"vue-learn/响应式/4.md","localizedDate":"2024年1月21日","excerpt":"<h2> Proxy</h2>\\n<p>Proxy 可以对对象进行代理,代理对象的每个属性都可以触发 get 和 set，还可以监听到属性的添加和删除</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> origin <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ytx\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"23\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">price</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> proxy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>origin<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 被代理对象，key,新值,代理对象</span>\\n  <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> recevier<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"setter\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> recevier<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> recevier<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"getter\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> recevier<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 通过代理对象才可以触发set和get</span>\\nproxy<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">;</span>\\nproxy<span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 可以触发set</span>\\nproxy<span class=\\"token punctuation\\">.</span>add <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"new\\"</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
