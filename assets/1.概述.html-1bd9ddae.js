const e=JSON.parse('{"key":"v-37027a41","path":"/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/0.%E6%A6%82%E8%BF%B0/1.%E6%A6%82%E8%BF%B0.html","title":"一、vue概述","lang":"zh-CN","frontmatter":{"title":"一、vue概述","icon":"laptop-code","order":1,"category":["使用指南","vue"],"description":"虚拟 DOM 虚拟 DOM: 用 JavaScript 对象描述 UI 的方式 目的：让用户可以声明式地去构建 UI，相较于调用 DOM api 命令式代码，可维护性更高，心智负担低；虽然性能不如命令式代码，但可以通过 Diff 算法找出虚拟 DOM 变化的地方（javascript 层面的运算，消耗远小于 DOM 层面的计算），再进行必须要的 DOM 更新，避免全量更新，提高性能。 优点： 提高开发效率：能够基于函数式 UI 的编程方式实现高效的声明式编程 跨平台问题：虚拟 DOM 是对真实渲染内容的一层抽象。同一套虚拟 DOM，可以对接不同平台的渲染逻辑(可以将 DOM 操作抽离出来)，从而实现“一次编码，多端运行”","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/0.%E6%A6%82%E8%BF%B0/1.%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"一、vue概述"}],["meta",{"property":"og:description","content":"虚拟 DOM 虚拟 DOM: 用 JavaScript 对象描述 UI 的方式 目的：让用户可以声明式地去构建 UI，相较于调用 DOM api 命令式代码，可维护性更高，心智负担低；虽然性能不如命令式代码，但可以通过 Diff 算法找出虚拟 DOM 变化的地方（javascript 层面的运算，消耗远小于 DOM 层面的计算），再进行必须要的 DOM 更新，避免全量更新，提高性能。 优点： 提高开发效率：能够基于函数式 UI 的编程方式实现高效的声明式编程 跨平台问题：虚拟 DOM 是对真实渲染内容的一层抽象。同一套虚拟 DOM，可以对接不同平台的渲染逻辑(可以将 DOM 操作抽离出来)，从而实现“一次编码，多端运行”"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-16T10:11:12.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-16T10:11:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一、vue概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-16T10:11:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"虚拟 DOM","slug":"虚拟-dom","link":"#虚拟-dom","children":[]},{"level":2,"title":"运行时/编译时","slug":"运行时-编译时","link":"#运行时-编译时","children":[]}],"git":{"createdTime":1710583872000,"updatedTime":1710583872000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"vue-learn/运行时/0.概述/1.概述.md","localizedDate":"2024年3月16日","excerpt":"<h2> 虚拟 DOM</h2>\\n<p>虚拟 DOM: 用 JavaScript 对象描述 UI 的方式</p>\\n<p>目的：让用户可以声明式地去构建 UI，相较于调用 DOM api 命令式代码，可维护性更高，心智负担低；虽然性能不如命令式代码，但可以通过 Diff 算法找出虚拟 DOM 变化的地方（javascript 层面的运算，消耗远小于 DOM 层面的计算），再进行必须要的 DOM 更新，避免全量更新，提高性能。</p>\\n<p>优点：</p>\\n<ol>\\n<li>提高开发效率：能够基于函数式 UI 的编程方式实现高效的声明式编程</li>\\n<li>跨平台问题：虚拟 DOM 是对真实渲染内容的一层抽象。同一套虚拟 DOM，可以对接不同平台的渲染逻辑(可以将 DOM 操作抽离出来)，从而实现“一次编码，多端运行”</li>\\n</ol>","autoDesc":true}');export{e as data};
