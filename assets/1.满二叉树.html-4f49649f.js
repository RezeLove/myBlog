const n=JSON.parse('{"key":"v-fae2971e","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/1.%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html","title":"满二叉树/完全二叉树","lang":"zh-CN","frontmatter":{"title":"满二叉树/完全二叉树","order":1,"category":["算法题","二叉树"],"description":"思路 从左到右排列 对于第 i 个节点，它的子节点是 i2+1 以及 i2+2 实现 循环层序填充 class TreeNode { constructor(value) { this.value = value; // 节点的值 this.left = null; // 左孩子节点 this.right = null; // 右孩子节点 } } function buildCompleteBinaryTree(nums) { // 现将数组中的每个元素转化为node const nodes = nums.map((value) =&gt; value !== null ? new TreeNode(value) : null ); for (let i = 0; i &lt; nodes.length; i++) { const leftIndex = 2 * i + 1; const rightIndex = 2 * i + 2; if (leftIndex &lt; nodes.length) { nodes[i].left = nodes[leftIndex]; } if (rightIndex &lt; nodes.length) { nodes[i].right = nodes[rightIndex]; } } return nodes[0]; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/1.%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"满二叉树/完全二叉树"}],["meta",{"property":"og:description","content":"思路 从左到右排列 对于第 i 个节点，它的子节点是 i2+1 以及 i2+2 实现 循环层序填充 class TreeNode { constructor(value) { this.value = value; // 节点的值 this.left = null; // 左孩子节点 this.right = null; // 右孩子节点 } } function buildCompleteBinaryTree(nums) { // 现将数组中的每个元素转化为node const nodes = nums.map((value) =&gt; value !== null ? new TreeNode(value) : null ); for (let i = 0; i &lt; nodes.length; i++) { const leftIndex = 2 * i + 1; const rightIndex = 2 * i + 2; if (leftIndex &lt; nodes.length) { nodes[i].left = nodes[leftIndex]; } if (rightIndex &lt; nodes.length) { nodes[i].right = nodes[rightIndex]; } } return nodes[0]; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T06:47:17.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-27T06:47:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"满二叉树/完全二叉树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-27T06:47:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1714200437000,"updatedTime":1714200437000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.66,"words":199},"filePathRelative":"算法题/二叉树/数组构建二叉树/1.满二叉树.md","localizedDate":"2024年4月27日","excerpt":"<h2> 思路</h2>\\n<ol>\\n<li>从左到右排列</li>\\n<li>对于第 i 个节点，它的子节点是 i<em>2+1 以及 i</em>2+2</li>\\n</ol>\\n<h2> 实现</h2>\\n<ol>\\n<li>循环层序填充</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeNode</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 节点的值</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 左孩子节点</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 右孩子节点</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">buildCompleteBinaryTree</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">nums</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 现将数组中的每个元素转化为node</span>\\n  <span class=\\"token keyword\\">const</span> nodes <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span>\\n    value <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> nodes<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> leftIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> rightIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>leftIndex <span class=\\"token operator\\">&lt;</span> nodes<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> nodes<span class=\\"token punctuation\\">[</span>leftIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>rightIndex <span class=\\"token operator\\">&lt;</span> nodes<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> nodes<span class=\\"token punctuation\\">[</span>rightIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> nodes<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
