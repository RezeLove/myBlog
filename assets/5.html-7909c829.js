const t=JSON.parse('{"key":"v-69ffb1c1","path":"/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/5.html","title":"symbol.iterator","lang":"zh-CN","frontmatter":{"title":"symbol.iterator","order":5,"category":["面试","ES6"],"description":"迭代器 Iterator Iterator 是一个迭代器，实现了这个接口就可进行 for...of 遍历，即对象有 Symbol.iterator 属性。原生已实现该接口的数据类型有 Array、Map、Set、NodeList、String 以及函数的 arguments 对象。 实现 Symbole.iterator 方法 对象中增加方法名为 Symbol 类型 Symbole.iterator 的方法，该方法返回一个对象，并且对象要有一个 next 方法，next 方法又要返回一个包含 value(任意类型)和 done(布尔值)属性的对象。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/5.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"symbol.iterator"}],["meta",{"property":"og:description","content":"迭代器 Iterator Iterator 是一个迭代器，实现了这个接口就可进行 for...of 遍历，即对象有 Symbol.iterator 属性。原生已实现该接口的数据类型有 Array、Map、Set、NodeList、String 以及函数的 arguments 对象。 实现 Symbole.iterator 方法 对象中增加方法名为 Symbol 类型 Symbole.iterator 的方法，该方法返回一个对象，并且对象要有一个 next 方法，next 方法又要返回一个包含 value(任意类型)和 done(布尔值)属性的对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"symbol.iterator\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"迭代器 Iterator","slug":"迭代器-iterator","link":"#迭代器-iterator","children":[]},{"level":2,"title":"实现 Symbole.iterator 方法","slug":"实现-symbole-iterator-方法","link":"#实现-symbole-iterator-方法","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"前端笔记/js/5.md","localizedDate":"2024年1月21日","excerpt":"<h2> 迭代器 Iterator</h2>\\n<p>Iterator 是一个迭代器，实现了这个接口就可进行 for...of 遍历，即对象有 Symbol.iterator 属性。原生已实现该接口的数据类型有 Array、Map、Set、NodeList、String 以及函数的 arguments 对象。</p>\\n<h2> 实现 Symbole.iterator 方法</h2>\\n<p>对象中增加方法名为 Symbol 类型 Symbole.iterator 的方法，该方法返回一个对象，并且对象要有一个 next 方法，next 方法又要返回一个包含 value(任意类型)和 done(布尔值)属性的对象。</p>","autoDesc":true}');export{t as data};
