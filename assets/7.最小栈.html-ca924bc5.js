const n=JSON.parse('{"key":"v-b65ee6b0","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/7.%E6%9C%80%E5%B0%8F%E6%A0%88.html","title":"最小栈","lang":"zh-CN","frontmatter":{"title":"最小栈","order":7,"category":["算法题","栈"],"description":"题目链接 链接 思路 借助一个辅助栈，用于保存当前数组中的最小元素，每次栈中推入或删除元素，辅助栈也相应更新 实现 var MinStack = function () { this.stack = []; // 辅助栈 this.minStack = [Infinity]; }; /** * @param {number} val * @return {void} */ MinStack.prototype.push = function (val) { const len = this.minStack.length; this.stack.push(val); // 辅助栈更新当加入当前元素后，数组的最小元素 this.minStack.push(Math.min(val, this.minStack[len - 1])); }; /** * @return {void} */ MinStack.prototype.pop = function () { this.stack.pop(); // 辅助栈也需要跟随删除 this.minStack.pop(); }; /** * @return {number} */ MinStack.prototype.top = function () { return this.stack[this.stack.length - 1]; }; /** * @return {number} */ MinStack.prototype.getMin = function () { return this.minStack[this.minStack.length - 1]; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/7.%E6%9C%80%E5%B0%8F%E6%A0%88.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"最小栈"}],["meta",{"property":"og:description","content":"题目链接 链接 思路 借助一个辅助栈，用于保存当前数组中的最小元素，每次栈中推入或删除元素，辅助栈也相应更新 实现 var MinStack = function () { this.stack = []; // 辅助栈 this.minStack = [Infinity]; }; /** * @param {number} val * @return {void} */ MinStack.prototype.push = function (val) { const len = this.minStack.length; this.stack.push(val); // 辅助栈更新当加入当前元素后，数组的最小元素 this.minStack.push(Math.min(val, this.minStack[len - 1])); }; /** * @return {void} */ MinStack.prototype.pop = function () { this.stack.pop(); // 辅助栈也需要跟随删除 this.minStack.pop(); }; /** * @return {number} */ MinStack.prototype.top = function () { return this.stack[this.stack.length - 1]; }; /** * @return {number} */ MinStack.prototype.getMin = function () { return this.minStack[this.minStack.length - 1]; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T12:21:18.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-10T12:21:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最小栈\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-10T12:21:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1710073278000,"updatedTime":1710073278000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.52,"words":156},"filePathRelative":"算法题/栈与队列/7.最小栈.md","localizedDate":"2024年3月10日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/min-stack/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">链接</a></p>\\n<h2> 思路</h2>\\n<p>借助一个辅助栈，用于保存当前数组中的最小元素，每次栈中推入或删除元素，辅助栈也相应更新</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">MinStack</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stack <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 辅助栈</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">Infinity</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span> <span class=\\"token parameter\\">val</span>\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MinStack</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">push</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> len <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 辅助栈更新当加入当前元素后，数组的最小元素</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">[</span>len <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MinStack</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">pop</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 辅助栈也需要跟随删除</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MinStack</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">top</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@return</span> <span class=\\"token class-name\\"><span class=\\"token punctuation\\">{</span>number<span class=\\"token punctuation\\">}</span></span>\\n */</span>\\n<span class=\\"token class-name\\">MinStack</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">getMin</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>minStack<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
