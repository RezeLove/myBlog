const n=JSON.parse('{"key":"v-5406f64e","path":"/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/1.%E6%89%8B%E5%86%99filter.html","title":"手写filter","lang":"zh-CN","frontmatter":{"title":"手写filter","order":1,"category":["面试","数组方法"],"description":"filter 的入参 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter filter(callbackFn, thisArg) callbackFn(element,index,array) thisArg:调用了 执行 callbackFn 时用作 this 的值 实现 Array.prototype.myFilter = function (fn) { // 保存结果 let result = []; // 如果传了第二个参数 let context = arguments[1] || window; if (typeof fn === \\"function\\") { // this指向调用filter函数的数组 for (let i = 0; i &lt; this.length; i++) { let condition = fn.call(context, this[i], i, this); if (condition) { result.push(this[i]); } } } else { throw new Error(\\"parameter1 is not a function\\"); } return result; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/%E6%89%8B%E5%86%99%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/1.%E6%89%8B%E5%86%99filter.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"手写filter"}],["meta",{"property":"og:description","content":"filter 的入参 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter filter(callbackFn, thisArg) callbackFn(element,index,array) thisArg:调用了 执行 callbackFn 时用作 this 的值 实现 Array.prototype.myFilter = function (fn) { // 保存结果 let result = []; // 如果传了第二个参数 let context = arguments[1] || window; if (typeof fn === \\"function\\") { // this指向调用filter函数的数组 for (let i = 0; i &lt; this.length; i++) { let condition = fn.call(context, this[i], i, this); if (condition) { result.push(this[i]); } } } else { throw new Error(\\"parameter1 is not a function\\"); } return result; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T01:41:27.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-08T01:41:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写filter\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T01:41:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"filter 的入参","slug":"filter-的入参","link":"#filter-的入参","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1712540487000,"updatedTime":1712540487000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.38,"words":115},"filePathRelative":"前端笔记/js/手写数组方法/1.手写filter.md","localizedDate":"2024年4月8日","excerpt":"<h2> filter 的入参</h2>\\n<p>https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\\nfilter(callbackFn, thisArg)\\ncallbackFn(element,index,array)\\nthisArg:调用了 执行 callbackFn 时用作 this 的值</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">myFilter</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 保存结果</span>\\n  <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 如果传了第二个参数</span>\\n  <span class=\\"token keyword\\">let</span> context <span class=\\"token operator\\">=</span> arguments<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">||</span> window<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> fn <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"function\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// this指向调用filter函数的数组</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">let</span> condition <span class=\\"token operator\\">=</span> <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>condition<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"parameter1 is not a function\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
