const n=JSON.parse('{"key":"v-4c112828","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/6.html","title":"二叉树的所有路径","lang":"zh-CN","frontmatter":{"title":"二叉树的所有路径","order":6,"category":["算法题","二叉树"],"description":"题目链接 题目链接 思路 递归思路：采用前序遍历的顺序，遇到中间节点先拼接中间节点的路径，然后再处理左右节点；当遇到叶子节点，终止递归，将最终路径存入结果中 实现 递归遍历 var binaryTreePaths = function (root) { const res = []; // 1.确定递归函数参数 const getPath = (root, curpath) =&gt; { // 2.终止条件：遇到叶子节点，将path放进res中 if (root.left == null &amp;&amp; root.right == null) { curpath += root.val; res.push(curpath); } // 3.单层递归:先处理中间节点的path 然后处理左右节点 curpath += root.val + \\"-&gt;\\"; root.left &amp;&amp; getPath(root.left, curpath); root.right &amp;&amp; getPath(root.right, curpath); }; getPath(root, \\"\\"); return res; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/6.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"二叉树的所有路径"}],["meta",{"property":"og:description","content":"题目链接 题目链接 思路 递归思路：采用前序遍历的顺序，遇到中间节点先拼接中间节点的路径，然后再处理左右节点；当遇到叶子节点，终止递归，将最终路径存入结果中 实现 递归遍历 var binaryTreePaths = function (root) { const res = []; // 1.确定递归函数参数 const getPath = (root, curpath) =&gt; { // 2.终止条件：遇到叶子节点，将path放进res中 if (root.left == null &amp;&amp; root.right == null) { curpath += root.val; res.push(curpath); } // 3.单层递归:先处理中间节点的path 然后处理左右节点 curpath += root.val + \\"-&gt;\\"; root.left &amp;&amp; getPath(root.left, curpath); root.right &amp;&amp; getPath(root.right, curpath); }; getPath(root, \\"\\"); return res; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉树的所有路径\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.61,"words":183},"filePathRelative":"算法题/二叉树/6.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/binary-tree-paths/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">题目链接</a></p>\\n<h2> 思路</h2>\\n<p>递归思路：采用前序遍历的顺序，遇到中间节点先拼接中间节点的路径，然后再处理左右节点；当遇到叶子节点，终止递归，将最终路径存入结果中</p>\\n<h2> 实现</h2>\\n<ol>\\n<li>递归遍历</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">binaryTreePaths</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 1.确定递归函数参数</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">getPath</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root<span class=\\"token punctuation\\">,</span> curpath</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 2.终止条件：遇到叶子节点，将path放进res中</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      curpath <span class=\\"token operator\\">+=</span> root<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n      res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>curpath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 3.单层递归:先处理中间节点的path 然后处理左右节点</span>\\n    curpath <span class=\\"token operator\\">+=</span> root<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"-&gt;\\"</span><span class=\\"token punctuation\\">;</span>\\n    root<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">getPath</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">,</span> curpath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    root<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">getPath</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">,</span> curpath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">getPath</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
