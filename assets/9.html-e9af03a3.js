const n=JSON.parse('{"key":"v-70d3143d","path":"/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/9.html","title":"手写bind","lang":"zh-CN","frontmatter":{"title":"手写bind","order":10,"category":["面试","ES6"],"description":"思路 bind 与 call 和 apply 有一定的区别，因此在实现上差异较大： call 与 apply 是在调用时临时修改 this 指向并立即执行一次；而 bind 是永久修改 this 指向且不会立即执行，返回的是一个修改 this 指向后的函数 bind 能够多次接受参数，调用 bind 时传入，返回的函数调用时接受参数 bind 第一版 Function.prototype.myBind = function (context) { // 箭头函数没有this，因此无法调用bind，这里需要排除 if (typeof this !== \\"function\\") { throw new TypeError(\\"error\\"); } context = context || window; // 保存当前的this let that = this, //取出参数 args = [...arguments].slice(1); // 闭包，返回一个函数 return function Fn() { const innerArgs = [...arguments]; // 调用apply，将外面传递的参数和里面传递的参数合并 return that.apply(context, [args, innerArgs]); }; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js/9.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"手写bind"}],["meta",{"property":"og:description","content":"思路 bind 与 call 和 apply 有一定的区别，因此在实现上差异较大： call 与 apply 是在调用时临时修改 this 指向并立即执行一次；而 bind 是永久修改 this 指向且不会立即执行，返回的是一个修改 this 指向后的函数 bind 能够多次接受参数，调用 bind 时传入，返回的函数调用时接受参数 bind 第一版 Function.prototype.myBind = function (context) { // 箭头函数没有this，因此无法调用bind，这里需要排除 if (typeof this !== \\"function\\") { throw new TypeError(\\"error\\"); } context = context || window; // 保存当前的this let that = this, //取出参数 args = [...arguments].slice(1); // 闭包，返回一个函数 return function Fn() { const innerArgs = [...arguments]; // 调用apply，将外面传递的参数和里面传递的参数合并 return that.apply(context, [args, innerArgs]); }; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写bind\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"bind 第一版","slug":"bind-第一版","link":"#bind-第一版","children":[]},{"level":2,"title":"bind 最终版","slug":"bind-最终版","link":"#bind-最终版","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"前端笔记/js/9.md","localizedDate":"2024年1月21日","excerpt":"<h2> 思路</h2>\\n<p>bind 与 call 和 apply 有一定的区别，因此在实现上差异较大：</p>\\n<ul>\\n<li>call 与 apply 是在调用时临时修改 this 指向并立即执行一次；而 bind 是永久修改 this 指向且不会立即执行，返回的是一个修改 this 指向后的函数</li>\\n<li>bind 能够多次接受参数，调用 bind 时传入，返回的函数调用时接受参数</li>\\n</ul>\\n<h2> bind 第一版</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token class-name\\">Function</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">myBind</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">context</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 箭头函数没有this，因此无法调用bind，这里需要排除</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> <span class=\\"token keyword\\">this</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">\\"function\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TypeError</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"error\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  context <span class=\\"token operator\\">=</span> context <span class=\\"token operator\\">||</span> window<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 保存当前的this</span>\\n  <span class=\\"token keyword\\">let</span> that <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">//取出参数</span>\\n    args <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>arguments<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 闭包，返回一个函数</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> innerArgs <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>arguments<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 调用apply，将外面传递的参数和里面传递的参数合并</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">that</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>args<span class=\\"token punctuation\\">,</span> innerArgs<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
