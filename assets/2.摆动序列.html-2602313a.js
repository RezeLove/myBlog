import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as o,a as n,b as s,e as c,f as r}from"./app-ff134072.js";const i={},l=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),s(" 题目链接")],-1),u={href:"https://leetcode.cn/problems/wiggle-subsequence/",target:"_blank",rel:"noopener noreferrer"},d=r(`<h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>考虑最理想的情况：如果整个序列都是摆动序列，如果用图形来表示，那么这个序列就是由连续的波峰和波谷构成的</p><p>因此局部最优的情况就是某个元素能不能构成一个波峰和波谷，要判断这一点就需要前后的插值 prediff 和 curdiff</p><p>如果(prediff &lt; 0 &amp;&amp; curdiff &gt; 0) || (prediff &gt; 0 &amp;&amp; curdiff &lt;= 0)，那么说明该元素是一个波峰或者波谷</p><p>此外还需要考虑开头的元素，比如[1,2]的最长子序列的长度是 2，那么对于这种情况，可以默认 result 为 1（最右侧有个峰值），然后判断开头的元素</p><p>如果(prediff = 0 &amp;&amp; curdiff &gt; 0) || (prediff = 0 &amp;&amp; curdiff &lt;= 0)那么可以认为开头的元素满足条件</p><p>最后当找到满足条件的元素后，需要将 curdiff 赋值给 prediff，这样做是为了保持梯度</p><p>比如[1,2,2,3,3,4,1]实际上的摆动序列是[1,4,1]，在判断完第一个元素 1 的时候，prediff=1，在判断后面的元素时就可知道进入了单调递增中</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">wiggleMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    prediff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    curdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> curdiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// = 是计入表示开头的元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>prediff <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curdiff <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>prediff <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curdiff <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token comment">// 当找到满足条件的元素，需要把curdiff赋给prediff，以保持梯度</span>
      prediff <span class="token operator">=</span> curdiff<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function k(f,m){const a=p("ExternalLinkIcon");return t(),o("div",null,[l,n("p",null,[n("a",u,[s("摆动序列"),c(a)])]),d])}const h=e(i,[["render",k],["__file","2.摆动序列.html.vue"]]);export{h as default};
