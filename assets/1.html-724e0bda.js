const e=JSON.parse('{"key":"v-52707f20","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/2.%E6%8E%92%E5%88%97/1.html","title":"全排列1","lang":"zh-CN","frontmatter":{"title":"全排列1","order":1,"category":["算法题","排列","回溯"],"description":"题目链接 全排列 思路 思路： 与组合不同，排列在横向遍历中递归时，每次索引都要从头开始（而不是组合的 startIndex），如下图中，取 2 后，剩余集合为｛1,3｝；但是这样会导致纵向递归中出现重复的情况（如取了 1 后，递归时从头开始，又会遇到 1），为了避免这种情况，可以用一个 set 或者 map 保存已经读取过的值","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%9B%9E%E6%BA%AF/2.%E6%8E%92%E5%88%97/1.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"全排列1"}],["meta",{"property":"og:description","content":"题目链接 全排列 思路 思路： 与组合不同，排列在横向遍历中递归时，每次索引都要从头开始（而不是组合的 startIndex），如下图中，取 2 后，剩余集合为｛1,3｝；但是这样会导致纵向递归中出现重复的情况（如取了 1 后，递归时从头开始，又会遇到 1），为了避免这种情况，可以用一个 set 或者 map 保存已经读取过的值"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-07T09:44:36.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-03-07T09:44:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"全排列1\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-07T09:44:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1709804676000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":2}]},"readingTime":{"minutes":0.88,"words":265},"filePathRelative":"算法题/回溯/2.排列/1.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/permutations/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">全排列</a></p>\\n<h2> 思路</h2>\\n<p>思路：<br>\\n与组合不同，排列在横向遍历中递归时，每次索引都要从头开始（而不是组合的 startIndex），如下图中，取 2 后，剩余集合为｛1,3｝；但是这样会导致纵向递归中出现重复的情况（如取了 1 后，递归时从头开始，又会遇到 1），为了避免这种情况，可以用一个 set 或者 map 保存已经读取过的值</p>","autoDesc":true}');export{e as data};
