const n=JSON.parse('{"key":"v-7b578bc3","path":"/vue-learn/%E5%93%8D%E5%BA%94%E5%BC%8F/8.html","title":"八、实现coputed函数","lang":"zh-CN","frontmatter":{"title":"八、实现coputed函数","icon":"laptop-code","order":8,"category":["使用指南"],"description":"构造 ComputedRefImpl 类 export function computed(getterOrOptions: any) { let getter; const only_getter = isFunction(getterOrOptions); if (only_getter) { getter = getterOrOptions; } //getter保存的是computed接受的函数 return new ComputedRefImpl(getter); } // ComputedRefImpl与Ref有些类似，都是通过.value来触发get value export class ComputedRefImpl&lt;T&gt; { // dep收集的是与ComputedRefImpl.value相关的effect函数 public dep?: Dep = undefined; // _value是ComputedRefImpl的值 private _value!: T; public readonly effect: ReactiveEffect&lt;T&gt;; public readonly __v_isRef = true; //_dirty用于缓存 public _dirty = true; constructor(getter: () = T) { // 创建一个具有scheduler的ReactiveEffect类，这个scheduler用于触发依赖 this.effect = new ReactiveEffect(getter, () = { if (!this._dirty) { this._dirty = true; triggerRefValue(this); } }); this.effect.computed = this; } get value() { // 收集依赖 trackRefValue(this); if (this._dirty) { // 运行getter，重新计算._value的值并返回 this._value = this.effect.run(); this._dirty = false; } return this._value; } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue-learn/%E5%93%8D%E5%BA%94%E5%BC%8F/8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"八、实现coputed函数"}],["meta",{"property":"og:description","content":"构造 ComputedRefImpl 类 export function computed(getterOrOptions: any) { let getter; const only_getter = isFunction(getterOrOptions); if (only_getter) { getter = getterOrOptions; } //getter保存的是computed接受的函数 return new ComputedRefImpl(getter); } // ComputedRefImpl与Ref有些类似，都是通过.value来触发get value export class ComputedRefImpl&lt;T&gt; { // dep收集的是与ComputedRefImpl.value相关的effect函数 public dep?: Dep = undefined; // _value是ComputedRefImpl的值 private _value!: T; public readonly effect: ReactiveEffect&lt;T&gt;; public readonly __v_isRef = true; //_dirty用于缓存 public _dirty = true; constructor(getter: () = T) { // 创建一个具有scheduler的ReactiveEffect类，这个scheduler用于触发依赖 this.effect = new ReactiveEffect(getter, () = { if (!this._dirty) { this._dirty = true; triggerRefValue(this); } }); this.effect.computed = this; } get value() { // 收集依赖 trackRefValue(this); if (this._dirty) { // 运行getter，重新计算._value的值并返回 this._value = this.effect.run(); this._dirty = false; } return this._value; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"八、实现coputed函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"构造 ComputedRefImpl 类","slug":"构造-computedrefimpl-类","link":"#构造-computedrefimpl-类","children":[]},{"level":2,"title":"从一个例子查看执行流程","slug":"从一个例子查看执行流程","link":"#从一个例子查看执行流程","children":[]},{"level":2,"title":"computed 的缓存","slug":"computed-的缓存","link":"#computed-的缓存","children":[]},{"level":2,"title":"死循环问题","slug":"死循环问题","link":"#死循环问题","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"vue-learn/响应式/8.md","localizedDate":"2024年1月21日","excerpt":"<h2> 构造 ComputedRefImpl 类</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">computed</span><span class=\\"token punctuation\\">(</span>getterOrOptions<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> getter<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> only_getter <span class=\\"token operator\\">=</span> <span class=\\"token function\\">isFunction</span><span class=\\"token punctuation\\">(</span>getterOrOptions<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>only_getter<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    getter <span class=\\"token operator\\">=</span> getterOrOptions<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">//getter保存的是computed接受的函数</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ComputedRefImpl</span><span class=\\"token punctuation\\">(</span>getter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// ComputedRefImpl与Ref有些类似，都是通过.value来触发get value</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ComputedRefImpl<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// dep收集的是与ComputedRefImpl.value相关的effect函数</span>\\n  <span class=\\"token keyword\\">public</span> dep<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> Dep <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// _value是ComputedRefImpl的值</span>\\n  <span class=\\"token keyword\\">private</span> _value<span class=\\"token operator\\">!</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">readonly</span> effect<span class=\\"token operator\\">:</span> ReactiveEffect<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">readonly</span> __v_isRef <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//_dirty用于缓存</span>\\n  <span class=\\"token keyword\\">public</span> _dirty <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>getter<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 创建一个具有scheduler的ReactiveEffect类，这个scheduler用于触发依赖</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>effect <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReactiveEffect</span><span class=\\"token punctuation\\">(</span>getter<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_dirty<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_dirty <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">triggerRefValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>effect<span class=\\"token punctuation\\">.</span>computed <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">get</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 收集依赖</span>\\n    <span class=\\"token function\\">trackRefValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_dirty<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 运行getter，重新计算._value的值并返回</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_value <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>effect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_dirty <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_value<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
