const t=JSON.parse('{"key":"v-b9336c6c","path":"/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/3.%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/8.html","title":"setup函数的作用与实现","lang":"zh-CN","frontmatter":{"title":"setup函数的作用与实现","icon":"laptop-code","order":2,"category":["vue","组件"],"description":"setup 函数的作用 setup 函数是 Vue.js 3 新增的组件选项，用于配合组合式 API，为用户提供一个地方，用于建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等能力，setup 函数只会在被挂载时执行一次， setup 接受两个函数，一个是 props 对象：传递给组件的属性；另一个是 setupContext 对象：保存与组件接口相关的数据与方法，如 slots、emits、attrs、expose const comp = { props: { foo: String, }, setup(props, setupContext) { // 访问传入props的数据 props.foo; // 取出setupContext 中包含与组件接口相关的重要数据 const { slots, emit, attrs, expose } = setupContext; }, };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue-learn/%E8%BF%90%E8%A1%8C%E6%97%B6/3.%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"setup函数的作用与实现"}],["meta",{"property":"og:description","content":"setup 函数的作用 setup 函数是 Vue.js 3 新增的组件选项，用于配合组合式 API，为用户提供一个地方，用于建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等能力，setup 函数只会在被挂载时执行一次， setup 接受两个函数，一个是 props 对象：传递给组件的属性；另一个是 setupContext 对象：保存与组件接口相关的数据与方法，如 slots、emits、attrs、expose const comp = { props: { foo: String, }, setup(props, setupContext) { // 访问传入props的数据 props.foo; // 取出setupContext 中包含与组件接口相关的重要数据 const { slots, emit, attrs, expose } = setupContext; }, };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"setup函数的作用与实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"setup 函数的作用","slug":"setup-函数的作用","link":"#setup-函数的作用","children":[]},{"level":2,"title":"setup 函数的实现","slug":"setup-函数的实现","link":"#setup-函数的实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.82,"words":545},"filePathRelative":"vue-learn/运行时/3.组件/1.组件实现基本原理/8.md","localizedDate":"2024年1月21日","excerpt":"<h2> setup 函数的作用</h2>\\n<p>setup 函数是 Vue.js 3 新增的组件选项，用于配合组合式 API，为用户提供一个地方，用于建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等能力，setup 函数只会在被挂载时执行一次，</p>\\n<p>setup 接受两个函数，一个是 props 对象：传递给组件的属性；另一个是 setupContext 对象：保存与组件接口相关的数据与方法，如 slots、emits、attrs、expose</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> comp <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">props</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">foo</span><span class=\\"token operator\\">:</span> String<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">setup</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props<span class=\\"token punctuation\\">,</span> setupContext</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 访问传入props的数据</span>\\n    props<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 取出setupContext 中包含与组件接口相关的重要数据</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> slots<span class=\\"token punctuation\\">,</span> emit<span class=\\"token punctuation\\">,</span> attrs<span class=\\"token punctuation\\">,</span> expose <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> setupContext<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
