const n=JSON.parse('{"key":"v-621b6fd6","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/1.%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E9%97%AE%E9%A2%98.html","title":"树的直径问题","lang":"zh-CN","frontmatter":{"title":"树的直径问题","order":1,"category":["算法题","动态规划"],"description":"二叉树的直径 二叉树的直径 思路：转化为最大深度的问题，不同之处在于，最长的链可能不经过根节点，在遍历每个节点时，都要计算一次把这个节点当作拐点时的链长度去更新答案 var diameterOfBinaryTree = function (root) { if (!root) { return 0; } let ans = 0; // 本质上还是求最大深度,只是对于每个节点，都需要计算以它为转折点的链的长度 const getDepth = (node) =&gt; { if (!node) { // 这里返回-1，叶子节点的最大深度就是0了 return -1; } // 左最大长度 let left = getDepth(node.left); let right = getDepth(node.right); // 用当前节点的链去更新ans ans = Math.max(ans, left + 1 + (right + 1)); // 返回当前节点的最大深度 return Math.max(left + 1, right + 1); }; getDepth(root); return ans; };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/1.%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"树的直径问题"}],["meta",{"property":"og:description","content":"二叉树的直径 二叉树的直径 思路：转化为最大深度的问题，不同之处在于，最长的链可能不经过根节点，在遍历每个节点时，都要计算一次把这个节点当作拐点时的链长度去更新答案 var diameterOfBinaryTree = function (root) { if (!root) { return 0; } let ans = 0; // 本质上还是求最大深度,只是对于每个节点，都需要计算以它为转折点的链的长度 const getDepth = (node) =&gt; { if (!node) { // 这里返回-1，叶子节点的最大深度就是0了 return -1; } // 左最大长度 let left = getDepth(node.left); let right = getDepth(node.right); // 用当前节点的链去更新ans ans = Math.max(ans, left + 1 + (right + 1)); // 返回当前节点的最大深度 return Math.max(left + 1, right + 1); }; getDepth(root); return ans; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T05:54:46.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-18T05:54:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"树的直径问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T05:54:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"二叉树的直径","slug":"二叉树的直径","link":"#二叉树的直径","children":[]},{"level":2,"title":"二叉树中的最大路径和","slug":"二叉树中的最大路径和","link":"#二叉树中的最大路径和","children":[]}],"git":{"createdTime":1713419686000,"updatedTime":1713419686000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":1.3,"words":391},"filePathRelative":"算法题/动态规划/树形DP/1.树的直径问题.md","localizedDate":"2024年4月18日","excerpt":"<h2> 二叉树的直径</h2>\\n<p><a href=\\"https://leetcode.cn/problems/diameter-of-binary-tree/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二叉树的直径</a></p>\\n<p>思路：转化为最大深度的问题，不同之处在于，最长的链可能不经过根节点，在遍历每个节点时，都要计算一次把这个节点当作拐点时的链长度去更新答案</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">diameterOfBinaryTree</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">let</span> ans <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 本质上还是求最大深度,只是对于每个节点，都需要计算以它为转折点的链的长度</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">getDepth</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 这里返回-1，叶子节点的最大深度就是0了</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 左最大长度</span>\\n    <span class=\\"token keyword\\">let</span> left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getDepth</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getDepth</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 用当前节点的链去更新ans</span>\\n    ans <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>ans<span class=\\"token punctuation\\">,</span> left <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 返回当前节点的最大深度</span>\\n    <span class=\\"token keyword\\">return</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> right <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">getDepth</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> ans<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
