import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as p,a as n,b as s,e as c,f as l}from"./app-e7adc1e1.js";const i="/assets/images/ggzx2.jpg",r="/assets/images/ggzx1.jpg",u={},k=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),s(" 题目链接")],-1),d={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},v=l('<h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>对一个 root 而言，公共祖先（LCA）存在两种情况：</p><ol><li>p 或 q 分别在 root 的两侧，那么 LCA 就是 root</li><li>p、q 在 root 的同一侧，那么 LCA 就是 p 或者 q</li></ol><p><img src="'+i+'" alt="公共祖先的2种情况" loading="lazy"> 根据上述的两种情况，当 root 从上往下遍历：</p><ol><li>如果遇到了 p 或者 q,LCA 要么是 p 或 q，要么是在它之上的节点，就无需继续遍历</li><li>如果遇到了 null，说明在这颗子树中不存在</li><li>如果不是 p 或 q 或 null，继续递归搜索 root 的左右子树： <ol><li>如果左右递归树都有结果，那么 p 和 q 分局 root 两侧，返回 root</li><li>如果单侧子树递归有结果，说明 p 和 q 都在这个子树中，返回子树递归调用的结果 3.如果两个子树都为 null，返回 null</li></ol></li></ol><figure><img src="'+r+`" alt="递归流程" tabindex="0" loading="lazy"><figcaption>递归流程</figcaption></figure><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">travelTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 递归终止条件，包含了情况2，如果p是q的子节点，那么遇到q之后就不会继续递归</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q <span class="token operator">||</span> root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 后序遍历，取到当前节点下left和right值</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">travelTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">travelTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 传递上来的的left和right都找到了值，说明root就是公共节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果left传上来的是null，则返回right的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 反之</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">travelTree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function m(f,b){const a=e("ExternalLinkIcon");return o(),p("div",null,[k,n("p",null,[n("a",d,[s("题目链接"),c(a)])]),v])}const _=t(u,[["render",m],["__file","12.html.vue"]]);export{_ as default};
