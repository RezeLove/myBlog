import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as n,b as a,e as l,f as i}from"./app-10be0e5b.js";const c="/assets/images/修改栈内存.webp",r="/assets/images/引用数据类型.webp",u={},d=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),a(" 参考链接")],-1),k={href:"https://juejin.cn/post/6844903854882947080#heading-8",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="数据类型与变量" tabindex="-1"><a class="header-anchor" href="#数据类型与变量" aria-hidden="true">#</a> 数据类型与变量</h2><p>ECMAScript 标准规定了 7 种数据类型，其把这 7 种数据类型又分为两种：原始类型和对象类型</p><p>原始类型：</p><ul><li>Null</li><li>Undefined</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol：一种实例是唯一且不可改变的数据类型</li></ul><p>对象类型:</p><ul><li>Object</li></ul><h2 id="_1-原始类型与对象类型的区别" tabindex="-1"><a class="header-anchor" href="#_1-原始类型与对象类型的区别" aria-hidden="true">#</a> 1 原始类型与对象类型的区别</h2><p>在 JavaScript 中，每一个变量在内存中都需要一个空间来存储，内存空间又被分为两种，栈内存与堆内存,其中：</p><p>栈内存：</p><ul><li>存储的值大小固定</li><li>空间较小</li><li>可以直接操作其保存的变量，运行效率高</li><li>由系统自动分配存储空间</li></ul><p>堆内存：</p><ul><li>存储的值大小不定，可动态调整</li><li>空间较大，运行效率低</li><li>无法直接操作其内部存储，使用引用地址读取</li><li>通过代码进行分配空间</li></ul><p>原始类型的值存在栈内存中，由于栈内存存储的值大小固定，因此存储在栈中的变量是不可变的,如下的代码本质上也是重新开辟了一个内存空间，并将变量指向该空间,并没有对原始数据类型作修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;ConardLi&quot;</span><span class="token punctuation">;</span>
str <span class="token operator">+=</span> <span class="token number">6</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对象数据类型也称为引用数据类型，其值存储在堆内存中，在栈中只存储了一个固定长度的地址</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-复制与比较" tabindex="-1"><a class="header-anchor" href="#_1-2-复制与比较" aria-hidden="true">#</a> 1.2 复制与比较</h3><p>对于原始类型，比较时会直接比较它们的值，如果值相等，即返回 true</p><p>对于引用类型，比较时会比较它们的引用地址，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为 false (如果是复制的话，引用地址是相同的，但如果是将一个对象赋值给两个变量，那么这两个变量存储的引用地址不同)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 赋值</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 复制</span>
<span class="token keyword">let</span> obj3 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">===</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-值传递与引用传递" tabindex="-1"><a class="header-anchor" href="#_1-3-值传递与引用传递" aria-hidden="true">#</a> 1.3 值传递与引用传递</h3><p>ECMAScript 中所有的函数的参数都是按值传递的,即在传递参数时是将<mark>变量复制了一个副本传给函数中的局部变量</mark>，变这个局部变量不会对外部变量产生影响<br> 但是对于引用数据类型而言，这个副本也是一个指向堆内存的地址，与外部变量指向堆内存中的值相同，如果对其进行修改，会影响到外部的变量(但这部以为是引用传递)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ConardLi&quot;</span><span class="token punctuation">;</span>
  obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;code秘密花园&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">changeValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ConardLi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-symbol-类型" tabindex="-1"><a class="header-anchor" href="#_2-symbol-类型" aria-hidden="true">#</a> 2. Symbol 类型</h2><p>特点：</p><ul><li>独一无二，如果想创造两个相等的 Symbol 变量，可以使用 <code>Symbol.for(key)</code></li><li>Symobol()不是一个构造函数，无法使用 <code>new Symbol()</code>创建 symbol 变量</li><li>不可枚举，如果将 symbol 类型对象作为一个对象的属性，那么最枚举对象属性时无法获取 symbol 属性</li></ul>`,27);function b(v,h){const s=t("ExternalLinkIcon");return o(),p("div",null,[d,n("p",null,[n("a",k,[a("【JS 进阶】你真的掌握变量和类型了吗"),l(s)])]),m])}const _=e(u,[["render",b],["__file","11.html.vue"]]);export{_ as default};
