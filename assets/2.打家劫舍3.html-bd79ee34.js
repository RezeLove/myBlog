const n=JSON.parse('{"key":"v-48d70df3","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/2.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D3.html","title":"打家劫舍3","lang":"zh-CN","frontmatter":{"title":"打家劫舍3","order":2,"category":["算法题","动态规划"],"description":"题目链接 打家劫舍 思路 每个节点都可以有两种状态（状态机）：选或不选 如果选了该节点，那么当前金额 = 不选左节点 + 不选右节点 + 该结点的金额 如果没选该节点：那么当前金额 = Max(选左，不选左) + Max(选右，不选右) 实现 var rob = function (root) { const createDP = (node) =&gt; { if (!node) { return [0, 0]; } // 第一位表示不偷的最大金额，第二位表示偷的最大金额 const left = createDP(node.left); const right = createDP(node.right); // 不偷当前节点 = 左右子树最大值相加 let stealnot = Math.max(left[0], left[1]) + Math.max(right[0], right[1]); // 偷当前节点 = 左右子树不偷 + 当前节点值 let steal = node.val + left[0] + right[0]; // 返回值包括两项 return [stealnot, steal]; }; const res = createDP(root); return Math.max(...res); };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/2.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D3.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"打家劫舍3"}],["meta",{"property":"og:description","content":"题目链接 打家劫舍 思路 每个节点都可以有两种状态（状态机）：选或不选 如果选了该节点，那么当前金额 = 不选左节点 + 不选右节点 + 该结点的金额 如果没选该节点：那么当前金额 = Max(选左，不选左) + Max(选右，不选右) 实现 var rob = function (root) { const createDP = (node) =&gt; { if (!node) { return [0, 0]; } // 第一位表示不偷的最大金额，第二位表示偷的最大金额 const left = createDP(node.left); const right = createDP(node.right); // 不偷当前节点 = 左右子树最大值相加 let stealnot = Math.max(left[0], left[1]) + Math.max(right[0], right[1]); // 偷当前节点 = 左右子树不偷 + 当前节点值 let steal = node.val + left[0] + right[0]; // 返回值包括两项 return [stealnot, steal]; }; const res = createDP(root); return Math.max(...res); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T05:54:46.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-04-18T05:54:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"打家劫舍3\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T05:54:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1713419686000,"updatedTime":1713419686000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.73,"words":220},"filePathRelative":"算法题/动态规划/树形DP/2.打家劫舍3.md","localizedDate":"2024年4月18日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/house-robber-iii/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">打家劫舍</a></p>\\n<h2> 思路</h2>\\n<p>每个节点都可以有两种状态（状态机）：选或不选</p>\\n<p>如果选了该节点，那么当前金额 = 不选左节点 + 不选右节点 + 该结点的金额</p>\\n<p>如果没选该节点：那么当前金额 = Max(选左，不选左) + Max(选右，不选右)</p>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">rob</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">root</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">createDP</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">node</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 第一位表示不偷的最大金额，第二位表示偷的最大金额</span>\\n    <span class=\\"token keyword\\">const</span> left <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createDP</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> right <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createDP</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 不偷当前节点 = 左右子树最大值相加</span>\\n    <span class=\\"token keyword\\">let</span> stealnot <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> left<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 偷当前节点 = 左右子树不偷 + 当前节点值</span>\\n    <span class=\\"token keyword\\">let</span> steal <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">+</span> left<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> right<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 返回值包括两项</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span>stealnot<span class=\\"token punctuation\\">,</span> steal<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createDP</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
