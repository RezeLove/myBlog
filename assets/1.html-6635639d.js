import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-d44287b3.js";const p={},e=t(`<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><p>编译器其实只是一段程序，它用来将“一种语言 A”翻译成“另外一种语言 B”。其中，语言 A 通常叫作源代码，语言 B 通常叫作目标代码。<br> 完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。<br> 其中词法分析、语法分析和语义分析称为编译前端，与目标平台无关；中间代码生成和优化以及目标代码生成称为变异后端，与目标平台有关</p><h2 id="vue-js-编译器的工作流程" tabindex="-1"><a class="header-anchor" href="#vue-js-编译器的工作流程" aria-hidden="true">#</a> vue.js 编译器的工作流程</h2><ol><li>首先对模版进行语法分析和词法分析，通过 parser 函数实现，得到模版 AST(抽象语法树)</li><li>将模板 AST 转换（transformer 函数）成 JavaScript AST</li><li>根据 JavaScript AST 生成（generater 函数） JavaScript 代码，即渲染函数代码</li></ol><h2 id="parser" tabindex="-1"><a class="header-anchor" href="#parser" aria-hidden="true">#</a> parser</h2><p>parser 用于将模版解析为模版 AST，此过程会先将模板解析为 token，然后根据 token 转化为模板 AST</p><blockquote><p>模版</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>模板 token</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;tagEnd&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;tagEnd&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>模版 AST</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// AST的逻辑根节点</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Element&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>解析为 token 将模板解析为 token 的方法采用的是有限状态自动机，简答来说就是将&#39;&lt;&#39;、&#39;/&#39;、&#39;&gt;&#39;都对应了一个状态如&#39;tagOpen&#39;、&#39;tagEnd&#39;，解析器会自动地在不同状态间迁移，获取其内容</p><blockquote><p>complie.ts</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>转化为模板 AST 接下来就是将模板 token 转化为模板 AST，将借助一个 elementStack 栈进行(用于保存尚未解析结束的节点)，每次读取到&#39;tag&#39;就存入栈,生成子节点,当读取到&#39;tagEnd&#39;就退出栈</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 转化为token</span>
    cost tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> elementStack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 每次将栈中的最后一个元素作为父节点</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> elementStack<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">const</span> t<span class="token operator">=</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span><span class="token string">&#39;tag&#39;</span><span class="token operator">:</span>
                <span class="token keyword">const</span> currentNode <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">tag</span><span class="token operator">:</span>t<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
                    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span>
            <span class="token comment">// 入栈</span>
            elementStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elementNode<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">&#39;text&#39;</span><span class="token operator">:</span>
                <span class="token keyword">const</span> textNode <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">content</span><span class="token operator">:</span>t<span class="token punctuation">.</span>content
                <span class="token punctuation">}</span>
                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">&#39;tagEnd&#39;</span><span class="token operator">:</span>
                <span class="token comment">// 遇到tagend 说明该子节点已经完成 出栈</span>
                elementStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 因为每次读取的是tokens的第一个，读完一个就</span>
        tokens<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","1.html.vue"]]);export{k as default};
