const e=JSON.parse('{"key":"v-5d10c97c","path":"/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/21.%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html","title":"最长递增序列","lang":"zh-CN","frontmatter":{"title":"最长递增序列","order":21,"category":["算法题","动态规划"],"description":"题目链接 最长递增序列 思路 回溯法 动态规划 dp[i] 表示 nums 中索引为 0-i 个元素的最长子序列长度 递推公式：将 nums[i] 与它之前的每一个元素 nums[j]比较，如果 nums[i]更大，则 dp[i] = dp[j]+1 找出最大的 dp[i]","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/21.%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"最长递增序列"}],["meta",{"property":"og:description","content":"题目链接 最长递增序列 思路 回溯法 动态规划 dp[i] 表示 nums 中索引为 0-i 个元素的最长子序列长度 递推公式：将 nums[i] 与它之前的每一个元素 nums[j]比较，如果 nums[i]更大，则 dp[i] = dp[j]+1 找出最大的 dp[i]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-21T08:05:49.000Z"}],["meta",{"property":"article:author","content":"TX"}],["meta",{"property":"article:modified_time","content":"2024-01-21T08:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最长递增序列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-21T08:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TX\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目链接","slug":"题目链接","link":"#题目链接","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1705824349000,"updatedTime":1705824349000,"contributors":[{"name":"RezeLove","email":"1224745953@qq.com","commits":1}]},"readingTime":{"minutes":0.98,"words":294},"filePathRelative":"算法题/动态规划/21.最长递增序列.md","localizedDate":"2024年1月21日","excerpt":"<h2> 题目链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/longest-increasing-subsequence/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">最长递增序列</a></p>\\n<h2> 思路</h2>\\n<ol>\\n<li>回溯法</li>\\n<li>动态规划</li>\\n</ol>\\n<p>dp[i] 表示 nums 中索引为 0-i 个元素的最长子序列长度</p>\\n<p>递推公式：将 nums[i] 与它之前的每一个元素 nums[j]比较，如果 nums[i]更大，则 dp[i] = dp[j]+1 找出最大的 dp[i]</p>","autoDesc":true}');export{e as data};
